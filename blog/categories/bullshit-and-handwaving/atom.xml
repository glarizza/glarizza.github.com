<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bullshit and handwaving | Shit Gary Says]]></title>
  <link href="http://garylarizza.com/blog/categories/bullshit-and-handwaving/atom.xml" rel="self"/>
  <link href="http://garylarizza.com/"/>
  <updated>2017-08-24T21:44:24-05:00</updated>
  <id>http://garylarizza.com/</id>
  <author>
    <name><![CDATA[Gary larizza]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Building a Functional Puppet Workflow Part 3b: More R10k Madness]]></title>
    <link href="http://garylarizza.com/blog/2014/03/07/puppet-workflow-part-3b/"/>
    <updated>2014-03-07T10:00:00-06:00</updated>
    <id>http://garylarizza.com/blog/2014/03/07/puppet-workflow-part-3b</id>
    <content type="html"><![CDATA[<p><a href="http://garylarizza.com/blog/2014/02/18/puppet-workflow-part-3/">In the last workflows post,</a> I talked about dynamic Puppet
environments and introduced R10k, which is an awesome tool for mapping modules
to their environments which are dynamically generated by git branches. I didn&rsquo;t
get out everything I wanted to say because:</p>

<ul>
<li>I was tired of that post sitting stale in a Google Doc</li>
<li>It was already goddamn long</li>
</ul>


<p>So because of that, consider this a continuation of that previous monstrosity
that talks about additional uses of R10k beyond the ordinary</p>

<h2>Let&rsquo;s talk Hiera</h2>

<p>But seriously, let&rsquo;s not actually talk about what Hiera does since
<a href="http://docs.puppetlabs.com/hiera/1/complete_example.html">there are better docs</a> out there for that. I&rsquo;m
also not going to talk about WHEN to use Hiera because
<a href="http://garylarizza.com/blog/2013/12/08/when-to-hiera/">I&rsquo;ve already done that before.</a> Instead, let&rsquo;s talk about a workflow
for submitting changes to Hiera data and testing it out before it enters into
production.</p>

<p>Most people store their Hiera data (if they&rsquo;re using a backend that reads Hiera
data from disk anyways) in separate repos as their Puppet repo. Some DO tie the
Hiera datadir folder to something like the main Puppet repo that houses their
<code>Puppetfie</code> (if they&rsquo;re using R10k), but for the most part it&rsquo;s a separate
repo because you may want separate permissions for accessing that data.
For the purposes of this post, I&rsquo;m going to refer to
<a href="https://github.com/glarizza/hiera_environment">a repository I use for storing Hiera data</a> that&rsquo;s out on Github.</p>

<p>The next logical step would be to integrate that Hiera repo into R10k so R10k can
track and create paths for Hiera data just like it did for Puppet.</p>

<p><strong>NOTE: Fundamentally, all that R10k does is checkout modules to a specific
path whose folder name comes from a git branch. PUPPET ties its environment
to this folder name with some <code>puppet.conf</code> trickery. So, to say that R10k
&ldquo;creates dynamic environments&rdquo; is the end-result, but not the actual job
of the tool.</strong></p>

<p>We COULD add Hiera&rsquo;s repository to the <code>/etc/r10k.yaml</code> file to track and
create folders for us, and if we did it EXACTLY like we did for Puppet we
would most definitely run into <a href="https://github.com/adrienthebo/r10k/issues/48">this R10k bug</a> (AND,
<a href="https://github.com/adrienthebo/r10k/issues/90">it comes up again in this bug</a>).</p>

<p><strong>UPDATE: So, I originally wrote this post BEFORE R10k version 1.1.4 was
released. Finch released version 1.1.4 which FIXES THESE BUGS&hellip;so the workflow
I&rsquo;m going to describe (i.e. using prefixing to solve the problem of using
multiple repos in <code>/etc/r10k.yaml</code> that could possibly share branch names)
TECHNICALLY does NOT need to be followed &lsquo;to the T&rsquo;, as it were. You can
disable prefixing when it comes to that step, and modify
<code>/etc/puppetlabs/puppet/hiera.yaml</code> so you don&rsquo;t prepend &lsquo;hiera_&rsquo; to the
path of each environment&rsquo;s folder, and you should be totally fine&hellip;you know,
as long as you use version 1.1.4 or greater of R10k.  So, be forewarned</strong></p>

<p>The issue is those bugs is that R10k collects the names of ALL the environments
from ALL the sources at once, so if you have multiple source repositories and
they share branch names, then you have clashes (since it only stores ONE branch
name internally). The solution that Finch came up with was prefixing (or,
prefixing the name of the branch with the name of the source). When you prefix,
however, it creates a folder on-disk that matches the prefixed name (e.g.
NameOfTheSource_NameOfTheBranch ). This is actually fine since we&rsquo;ll catch it
and deal with it, but you should be aware of it. Future versions of R10k may
most likely deal with this in a different manner, so make sure to check out the
R10k docs before blindly copying my code, okay? (Update: See the previous, bolded
paragraph where I describe how Finch DID JUST THAT).</p>

<p><a href="http://garylarizza.com/blog/2014/02/18/puppet-workflow-part-3/">In the previous post</a> I setup a file called <code>r10k_installation.pp</code>
to setup R10k. Let&rsquo;s revisit that manifest it and modify it for
<a href="https://github.com/glarizza/hiera_environment">my Hiera repo:</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/var/tmp/r10k_installation.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="nc">class</span> <span class="p">{</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">r10k</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">:</span>
</span><span class='line'>  <span class="nt">version</span>           <span class="p">=&gt;</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="m">1.1.4</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;,</span>
</span><span class='line'>  <span class="ss">sources</span>           <span class="err">=&gt;</span> <span class="p">{</span><span class="err">&lt;/</span><span class="ss">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">pre</span><span class="err">&gt;&lt;</span><span class="ss">code</span><span class="err">&gt;</span><span class="s1">&#39;puppet&#39;</span> <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;remote&#39;</span>  <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="s1">&#39;https://github.com/glarizza/puppet_repository.git&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;basedir&#39;</span> <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="s2">&quot;</span><span class="si">${::settings::confdir}</span><span class="s2">/environments&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;prefix&#39;</span>  <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="ss">false</span><span class="p">,</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="s1">&#39;hiera&#39;</span> <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;remote&#39;</span>  <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="s1">&#39;https://github.com/glarizza/hiera_environment.git&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;basedir&#39;</span> <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="s2">&quot;</span><span class="si">${::settings::confdir}</span><span class="s2">/hiera&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;prefix&#39;</span>  <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="ss">true</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="ss">pre</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">p</span><span class="err">&gt;</span>  <span class="p">}</span><span class="err">,</span>
</span><span class='line'>  <span class="ss">purgedirs</span>         <span class="err">=&gt;</span> <span class="p">[</span><span class="err">&amp;</span><span class="ss">ldquo</span><span class="err">;$</span><span class="p">{</span><span class="err">::</span><span class="ss">settings</span><span class="err">::</span><span class="ss">confdir</span><span class="p">}</span><span class="err">/</span><span class="ss">environments</span><span class="err">&amp;</span><span class="ss">rdquo</span><span class="err">;</span><span class="p">]</span><span class="err">,</span>
</span><span class='line'>  <span class="ss">manage_modulepath</span> <span class="err">=&gt;</span> <span class="ss">true</span><span class="err">,</span>
</span><span class='line'>  <span class="ss">modulepath</span>        <span class="err">=&gt;</span> <span class="err">&amp;</span><span class="ss">ldquo</span><span class="err">;$</span><span class="p">{</span><span class="err">::</span><span class="ss">settings</span><span class="err">::</span><span class="ss">confdir</span><span class="p">}</span><span class="sr">/environments/</span><span class="err">\</span><span class="nv">$environment</span><span class="sr">/modules:/</span><span class="ss">opt</span><span class="sr">/puppet/</span><span class="ss">share</span><span class="sr">/puppet/</span><span class="ss">modules</span><span class="err">&amp;</span><span class="ss">rdquo</span><span class="err">;,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>NOTE: For the duration of this post, I&rsquo;ll be referring to Puppet Enterprise
specific paths (like <code>/etc/puppetlabs/puppet</code> for $confdir). Please do the
translation for open source Puppet, as R10k will work just fine with either
the open source edition or the Enterprise edition of Puppet</strong></p>

<p>You&rsquo;ll note that I added a source called &lsquo;hiera&rsquo; that tracks my Hiera
repository, creates sub-folders in <code>/etc/puppetlabs/puppet/hiera</code>, and enables
prefixing to deal with the bug I mentioned in the previous paragraph. Now,
let&rsquo;s run Puppet and do an R10k synchronization:</p>

<p>```
[root@master1 garysawesomeenvironment]# puppet apply /var/tmp/r10k_installation.pp
Notice: Compiled catalog for master1 in environment production in 1.78 seconds
Notice: /Stage[main]/R10k::Config/File[r10k.yaml]/content: content changed &lsquo;{md5}c686917fcb572861429c83f1b67cfee5&rsquo; to &lsquo;{md5}69d38a14b5de0d9869ebd37922e7dec4&rsquo;
Notice: Finished catalog run in 1.24 seconds</p>

<p>[root@master1 puppet]# r10k deploy environment -pv
[R10K::Task::Deployment::DeployEnvironments &ndash; INFO] Loading environments from all sources
[R10K::Task::Environment::Deploy &ndash; NOTICE] Deploying environment hiera_testing
[R10K::Task::Puppetfile::Sync &ndash; INFO] Loading modules from Puppetfile into queue
[R10K::Task::Environment::Deploy &ndash; NOTICE] Deploying environment hiera_production
[R10K::Task::Puppetfile::Sync &ndash; INFO] Loading modules from Puppetfile into queue
[R10K::Task::Environment::Deploy &ndash; NOTICE] Deploying environment hiera_master
[R10K::Task::Puppetfile::Sync &ndash; INFO] Loading modules from Puppetfile into queue
[R10K::Task::Environment::Deploy &ndash; NOTICE] Deploying environment production
[R10K::Task::Puppetfile::Sync &ndash; INFO] Loading modules from Puppetfile into queue
[R10K::Task::Module::Sync &ndash; INFO] Deploying notifyme into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying redis into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying property_list_key into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying wordpress into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying make into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying concat into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vsftpd into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying portage into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying inifile into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying git into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vcsrepo into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying firewall into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying ruby into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying mysql into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying pe_gem into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying apache into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying stdlib into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying notifyme into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying redis into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying property_list_key into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying wordpress into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying make into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying concat into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vsftpd into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying portage into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying inifile into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying git into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vcsrepo into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying firewall into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying ruby into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying mysql into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying pe_gem into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying apache into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying stdlib into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Environment::Deploy &ndash; NOTICE] Deploying environment master
[R10K::Task::Puppetfile::Sync &ndash; INFO] Loading modules from Puppetfile into queue
[R10K::Task::Module::Sync &ndash; INFO] Deploying redis into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying property_list_key into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying wordpress into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vsftpd into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying portage into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying inifile into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying git into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vcsrepo into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying firewall into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying mysql into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying pe_gem into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying apache into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying stdlib into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying redis into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying property_list_key into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying wordpress into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vsftpd into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying portage into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying inifile into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying git into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vcsrepo into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying firewall into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying mysql into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying pe_gem into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying apache into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying stdlib into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Environment::Deploy &ndash; NOTICE] Deploying environment garysawesomeenvironment
[R10K::Task::Puppetfile::Sync &ndash; INFO] Loading modules from Puppetfile into queue
[R10K::Task::Module::Sync &ndash; INFO] Deploying notifyme into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying redis into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying property_list_key into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying wordpress into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying make into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying concat into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vsftpd into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying portage into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying inifile into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying git into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vcsrepo into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying firewall into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying ruby into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying mysql into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying pe_gem into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying apache into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying stdlib into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Environment::Deploy &ndash; NOTICE] Deploying environment development
[R10K::Task::Puppetfile::Sync &ndash; INFO] Loading modules from Puppetfile into queue
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying property_list_key into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying wordpress into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying inifile into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vsftpd into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying firewall into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying mysql into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying pe_gem into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying apache into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying stdlib into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Deployment::PurgeEnvironments &ndash; INFO] Purging stale environments from /etc/puppetlabs/puppet/environments
[R10K::Task::Deployment::PurgeEnvironments &ndash; INFO] Purging stale environments from /etc/puppetlabs/puppet/hiera</p>

<p>[root@master1 puppet]# ls /etc/puppetlabs/puppet/hiera
hiera_master  hiera_production  hiera_testing</p>

<p>[root@master1 puppet]# ls /etc/puppetlabs/puppet/environments/
development  garysawesomeenvironment  master  production
```</p>

<p>Great, so it configured R10k to clone the Hiera repository to
<code>/etc/puppetlabs/puppet/hiera</code> like we wanted it to, and you can see that with
prefixing enabled we have folders named &ldquo;hiera_${branchname}&rdquo;.</p>

<p>In Puppet, the magical connection that maps these subfolders to Puppet
environments is in <code>puppet.conf</code>, but for Hiera that&rsquo;s the <code>hiera.yaml</code> file.
I&rsquo;ve included that file in my <a href="https://github.com/glarizza/hiera_environment">Hiera repo</a>, so let&rsquo;s look at the
copy at <code>/etc/puppetlabs/puppet/hiera/hiera_production/hiera.yaml</code>:</p>

<h2><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/etc/puppetlabs/puppet/hiera/hiera_production/hiera.yaml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;:backends</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="nl">&amp;ndash</span><span class="l-Scalar-Plain">; yaml</span>
</span><span class='line'><span class="l-Scalar-Plain">:hierarchy</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="nl">&amp;ndash</span><span class="l-Scalar-Plain">; &amp;ldquo;%{clientcert}&amp;rdquo;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; &amp;ldquo;%{environment}&amp;rdquo;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; global&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;:yaml</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:datadir</span><span class="p-Indicator">:</span> <span class="nl">&amp;lsquo</span><span class="l-Scalar-Plain">;/etc/puppetlabs/puppet/hiera/hiera_%{environment}/hieradata&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The magical line is in the <code>:datadir:</code> setting of the <code>:yaml:</code> section; it
uses <code>%{environment}</code> to evaluate the environment variable set by Puppet and
set the path accordingly.</p>

<p>As of right now R10k is configured to clone Hiera data from a known repository
to <code>/etc/puppetlabs/puppet/hiera</code>, to create sub-folders based on branches to
that repository, and to tie data provided to each Puppet environment to the
respective subfolder of <code>/etc/puppetlabs/puppet/hiera</code> that matches the pattern
of <strong>&ldquo;hiera_(environment_name)&rdquo;</strong>.</p>

<h3>The problem with <code>hiera.yaml</code></h3>

<p>You&rsquo;ll notice that each subfolder to <code>/etc/puppetlabs/puppet/hiera</code> contains
its own copy of <code>hiera.yaml</code>.  You&rsquo;re probably drawing the conclusion that
each Puppet environment can read from its own <code>hiera.yaml</code> for Hiera configuration.</p>

<p>And you would be wrong.</p>

<p><a href="http://projects.puppetlabs.com/issues/11784">For information on this bug, check out this link.</a> You&rsquo;ll see
that we provide a &lsquo;hiera_config&rsquo; configuration option in Puppet that allows
you to specify the path to <code>hiera.yaml</code>, but Puppet loads that config as
singleton, which means that it&rsquo;s read initially when the Puppet master process
starts up and it&rsquo;s NOT environment-aware. The workaround is to use one
<code>hiera.yaml</code> for all environments on a Puppet master but to dynamically change
the <code>:datadir:</code> path according to the current environment (in the same way that
dynamic Puppet environments abuse &lsquo;$environment&rsquo; in <code>puppet.conf</code>). You gain
the ability to have per-environment changes to Hiera data but lose the ability
to do things like using different hierarchies for different environments. As
of right now, if you want a different hierarchy then you&rsquo;re going to need to
use a different master (or do some hacky things that I don&rsquo;t even want to
BEGIN to approach in this article).</p>

<p>In summary &ndash; there will be a hiera.yaml per environment, but they will not
be consulted on a per-environment basis.</p>

<h3>Workflow for per-environment Hiera data</h3>

<p><a href="http://garylarizza.com/blog/2014/02/18/puppet-workflow-part-3/">Looking back on the previous post,</a> you&rsquo;ll see that the workflow
for updating Hiera data is identical to the workflow for updating code to your
Puppet environments.  Namely, to create a new environment for testing Hiera
data, you will:</p>

<ul>
<li>Push a branch to the Hiera repository and name it accordingly (remembering
that the name you choose will be a new environment).</li>
<li>Run R10k to synchronize the data down to the Puppet master</li>
<li>Add your node to that environment and test out the changes</li>
</ul>


<p>For existing environments, simply push changes to that environment&rsquo;s branch
and repeat the last two steps.</p>

<p><strong>NOTE: Puppet environments and Hiera environments are linked &ndash; both tools use
the same &lsquo;environment&rsquo; concept and so environment names MUST match for the data
to be shared (i.e. if you create an environment in Puppet called &lsquo;yellow&rsquo;, you
will need a Hiera environment called &lsquo;yellow&rsquo; for that data).</strong></p>

<p>This tight-coupling can cause issues, and will ultimately mean that certain
branches are longer-lived than others. It&rsquo;s also the reason why I don&rsquo;t use
defaults in my <code>hiera()</code> lookups inside Puppet manifests &ndash; I WANT the early
failure of a compilation error to alert me of something that needs fixed.</p>

<p>You will need to determine whether this tight-coupling is worth it for your
organization to tie your Hiera repository directly into R10k or to handle it
out-of-band.</p>

<h2>R10k and monolithic module repositories</h2>

<p>One of the first requirements you encounter when working with R10k is that your
component modules need to be stored in their own repositories.  That convention
is still relatively new &ndash; it wasn&rsquo;t so long ago that we were recommending that
modules be locked away in a giant repo. Why?</p>

<ul>
<li>It&rsquo;s easier to clone</li>
<li>The state of module reusability was poor</li>
</ul>


<p>The main reason was that it was easier to put everything in one repo and clone
it out on all your Puppet master servers. This becomes insidious as your module
count rises and people start doing lovely things like committing large binaries
into modules, pulling in old versions of modules they find out on the web, and
the like. It also becomes an issue when you start needing to lock committers
out of specific directories due to sensitive data, and blah blah blah blah&hellip;</p>

<p>There are better posts out there justifying/villafying the choice of one or
multiple repositories, this section&rsquo;s meant only to show you how to incorporate
a single repository containing multiple modules into your R10k workflow.</p>

<p><a href="http://garylarizza.com/blog/2014/02/18/puppet-workflow-part-3/">From the last post</a> you&rsquo;ll remember that the <code>Puppetfile</code> allows
you to tie a repository, and some version reference, to a directory using
R10k. Incorporating a monolithic repository starts with an entry in the
<code>Puppetfile</code> like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Puppetfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mod</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">my_big_module_repo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="ss">git</span><span class="p">:</span><span class="sr">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">glarizza</span><span class="o">/</span><span class="n">my_big_module_repo</span><span class="o">.</span><span class="n">git</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="ss">:ref</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>NOTE: That git repository doesn&rsquo;t exist. I don&rsquo;t HAVE a monolithic repo to
demonstrate, so I&rsquo;ve chosen an arbitrary URI. Also note that you can use ANY
name you like after the <code>mod</code> syntax to name the resultant folder &ndash; it doesn&rsquo;t
HAVE to mirror the URI of the repository.</strong></p>

<p>Adding this entry to the <code>Puppetfile</code> would checkout that repository to
wherever all the other modules are checked out with a folder name of
&lsquo;my_big_module_repo&rsquo;. Within that folder would most-likely (again, depending
on how you&rsquo;ve laid out your repository) contain subfolders containing Puppet
modules. This entry gets the modules onto your Puppet master, but it doesn&rsquo;t
make Puppet aware of their location. For that, we&rsquo;re going to need to add an
entry to the &lsquo;modulepath&rsquo; configuration item in <code>puppet.conf</code></p>

<p>Inside <code>/etc/puppetlabs/puppet/puppet.conf</code> you should see a configuration item
called &lsquo;modulepath&rsquo; that currently has a value of:</p>

<p><code>
modulepath = /etc/puppetlabs/puppet/environments/$environment/modules:/opt/puppet/share/puppet/modules
</code></p>

<p>The modulepath itself works like a PATH environment variable in Linux &ndash; it&rsquo;s
a priority-based lookup mechanism that Puppet uses to find modules. Currently,
Puppet will first look in <code>/etc/puppetlabs/puppet/environments/$environment/modules</code>
for a module. If a the module that Puppet was looking for was found, Puppet
will use it and not inspect the second path. If the module was not found at the
FIRST path, it will inspect the second path. Failing to find the module at the
second path results in a compilation error for Puppet. Using this to our
advantage, we can add the path to the monolithic repository checked-out by the
<code>Puppetfile</code> AFTER the path to where all the individual modules are checked-out.
This should look something like this:</p>

<p><code>
modulepath = /etc/puppetlabs/puppet/environments/$environment/modules:/etc/puppetlabs/puppet/environments/$environment/modules/my_big_module_repo:/opt/puppet/share/puppet/modules
</code></p>

<p><strong>Note: This assumes all modules are in the root of the monolithic repo. If
they&rsquo;re in a subdirectory, you must adjust accordingly</strong></p>

<p>That&rsquo;s a huge line (and if you&rsquo;re afraid of anything over 80 column-widths then
I&rsquo;m sorry&hellip;and you should probably buy a new monitor&hellip;and the 80s are over),
but the gist is that we&rsquo;re first going to look for modules checked out by R10k,
THEN we&rsquo;re going to look for modules in our monolithic repo, then we&rsquo;re going
to look in Puppet Enterprise&rsquo;s vendored module directory, and finally, like I
said above, we&rsquo;ll fail if we can&rsquo;t find our module. This will allow you to KEEP
using your monolithic repository and also slowly cut modules inside that
monolithic repo over to their own repositories (since when they gain their own
repository, they will be located in a path that COMES before the monolithic
repo, and thus will be given priority).</p>

<h2>Using MCollective to perform R10k synchronizations</h2>

<p>This section is going to be much less specific than the rest because the piece
that does the ACTION is part of <a href="http://forge.puppetlabs.com/zack/r10k">a module for R10k</a>. As of the time
of this writing, this agent is in one state, but that could EASILY change. I
will defer to <a href="http://forge.puppetlabs.com/zack/r10k">the module in question</a> (and specifically its
README file) should you need specifics (or if my module is dated). What I CAN
tell you, however, is that <a href="http://forge.puppetlabs.com/zack/r10k">the R10k module</a> does come with a class
that will setup and configure both an MCollective agent for R10k and also a
helper application that should make doing R10k synchroniations on multiple
Puppet masters much easier than doing them by hand.  First, you&rsquo;ll need to
INSTALL the MCollective agent/application, and you can do that by pulling
down <a href="http://forge.puppetlabs.com/zack/r10k">the module</a> and its dependencies, and classifying all Puppet
masters with R10k enabled by doing the following:</p>

<p><code>puppet
include r10k::mcollective
</code></p>

<p>Terribly difficult, huh? With that, both the MCollective agent and application
should be available to MCollective on that node. The way to trigger a
syncronization is to login to an account on a machine that has MCollective
client access (in Puppet Enterprise, this would be any Puppet master that&rsquo;s
allowed the role, and then, specifically, the <code>peadmin</code> user&hellip;so doing a
<code>su - peadmin</code> should afford you access to that user), and perform the following
command:</p>

<p><code>
mco r10k deploy
</code></p>

<p>This is where the README differs a bit, and the reason for that is because Finch
changed the syntax that R10k uses to synchronize and deploy modules to a Master.
The CURRENTLY accepted command (because, knowing Finch, that shit might change)
is <code>r10k deploy environment -p</code>, and the action to the MCollective agent that
EXECUTES that command is the &lsquo;deploy&rsquo; action.  The README refers to the
&lsquo;synchronize&rsquo; action, which executes the <code>r10k synchronize</code> command. This command
MAY STILL WORK, but it&rsquo;s deprecated, and so it&rsquo;s NOT recommended to be used.</p>

<p>Like I said before, this agent is subject to change (mainly do to R10k command
deprecation and maturation), so definitely refer to the README and the code
itself for more information (or
<a href="http://github.com/acidprime/puppet-r10k">file issues and pull requests on the module repo directly</a>).</p>

<h2>Tying R10k to CI workflows</h2>

<p>I spent a year doing some presales work for the Puppet Labs SE team, so I can
hand-wave and tapdance like a motherfucker. I&rsquo;m going to need those skills for
this next section, because if you thought the previous section glossed over the
concepts pretty quickly and without much detail, then this section is going to
feel downright vaporous (is that a word? Fuck it; I&rsquo;m handwaving &ndash; it&rsquo;s
a word). I really debated whether to include the following sections in this
post because I don&rsquo;t really give you much specific information; it&rsquo;s all very
generic and full of &ldquo;ideas&rdquo; (though I do list some testing libraries below that
are helpful if you&rsquo;ve never heard of them). Feel free to abandon ship and skip
to the FINAL section right now if you don&rsquo;t want to hear about &lsquo;ideas&rsquo;.</p>

<p>For the record, I&rsquo;m going to just pick and use the term &ldquo;CI&rdquo; when I&rsquo;m referring
to the process of automating the testing and deployment of, in this case,
Puppet code.  There have definitely been posts arging about which definition is
more appropriate, but, frankly, I&rsquo;m just going to pick a term and go with it,</p>

<p>The issue at hand is that when you talk &ldquo;CI&rdquo; or &ldquo;CD&rdquo; or &ldquo;Continuous (fill_in_the_blank)&rdquo;, you&rsquo;re
talking about a workflow that&rsquo;s tailored to each organization (and sometimes
each DEPARTMENT of an organization). Sometimes places can agree on a specific
tool to assist them with this process (be it Jenkins, Hudson, Bamboo, or
whatever), but beyond that it&rsquo;s anyone&rsquo;s game.</p>

<p>Since we&rsquo;re talking PUPPET code, though, you&rsquo;re restricted to certain tasks
that will show up in any workflow&hellip;and THAT is what I want to talk about here.</p>

<p>To implement some sort of CI workflow means laying down a &lsquo;pipeline&rsquo; that takes a
change of your Puppet code (a new module, a change to an existing module, some
Hiera data updates, whatever) from the developer&rsquo;s/operations engineer&rsquo;s workstation
right into production.  The way we do this with R10k currently is to:</p>

<ul>
<li>Make a change to an individual module</li>
<li>Commit/push those changes to the module&rsquo;s remote repository</li>
<li>Create a test branch of the puppet_repository</li>
<li>Modify the <code>Puppetfile</code> and tie your module&rsquo;s changes to this environment</li>
<li>Commit/push those changes to the puppet_repository</li>
<li>Perform an R10k synchronization</li>
<li>Test</li>
<li>Repeat steps 1-7 as necessary until shit works how you like it</li>
<li>Merge the changes in the test branch of the puppet_repository with the production branch</li>
<li>Perform an R10k synchronization</li>
<li>Watch code changes become active in your production environment</li>
</ul>


<p>Of those steps, there&rsquo;s arguably about 3 unique steps that could be automated:</p>

<ul>
<li>R10k synchronizations</li>
<li>&lsquo;Testing&rsquo; (whatever that means)</li>
<li>Merging the changes in the test branch of the puppet_repository with the production branch</li>
</ul>


<p><strong>NOTE: As we get progressively-more-handwavey (also probably not a word, but fuck it &ndash; let&rsquo;s
be thought leaders and CREATE IT), each one of these steps is going to be more
and more&hellip;generic. For example &ndash; to say &ldquo;test your code&rdquo; is a great idea, but,
seriously, defining how to do that could (and should) be multiple blog posts.</strong></p>

<h3>Laying down the pipeline</h3>

<p>If I were building an automated workflow, the first thing I would do is
setup something like Jenkins and configure it to watch the puppet_repository
that contains the <code>Puppetfile</code> mapping all my modules and versions to Puppet
environments. On changes to this repository, we want Jenkins to perform an R10k
synchronization, run tests, and then, possibly, merge those changes into
production (depending on the quality of your tests and how &lsquo;webscale&rsquo; you think
you are on that day).</p>

<h3>R10k synchronizations</h3>

<p>If you&rsquo;re paying attention, we solved this problem in the previous section with
the R10k MCollective agent. Jenkins should be running on a machine that has the
ability to execute MCollective client commands (such as triggering
<code>mco r10k deploy</code> when necessary).  You&rsquo;ll want to tailor your calls from
Jenkins to only deploy environments it&rsquo;s currently testing (remember in the
puppet_repository that topic branches map to Puppet environments, so this
is a per-branch action) as opposed to deploying ALL environments every time.</p>

<p>Also, if you&rsquo;re buiding a pipeline, you might not want to do R10k
synchronizations on ALL of your Puppet Masters at this point. Why not? Well,
if your testing framework is good enough and has sufficient coverage that
you&rsquo;re COMPLETELY trusting it to determine whether code is acceptable or not,
then this is just the FIRST step &ndash; making the code available to be tested. It&rsquo;s
not passed tests yet, so pushing it out to all of your Puppet masters is a bit
wasteful. You&rsquo;ll probably want to only synchronize with a single master that&rsquo;s
been identified for testing (and a master that has the ability to spin up
fresh nodes, enforce the Puppet code on them, submit those nodes to a battery
of tests, and then tear them down when everything has been completed).</p>

<p>If you&rsquo;re like the VAST majority of Puppet users out there that DON&rsquo;T have a
completely automated testing framework that has such complete coverage that you
trust it to determine whether code changes are acceptable or not, then you&rsquo;re
probably &lsquo;testing&rsquo; changes manually. For these people, you&rsquo;ll probably want to
synchronize code to whichever Puppet master(s) are suitable.</p>

<p>The cool thing about these scenarios is that MCollective is flexible enough
to handle this. MCollective has the ability to filter your nodes based on
things like available MCollective agents, Facter facts, Puppet classes, and
even things like the MD5 hashes of arbitrary files on the filesystem&hellip;so
however you want to restrict synchronization, you can do it with MCollective.</p>

<p>After all of that, the answer here is &ldquo;Use MCollective to do R10k syncs/deploys.&rdquo;</p>

<h3>Testing</h3>

<p>This section needs its own subset of blog posts. There are all kinds of tools
that will allow you to test all sorts of things about your Puppet code (from
basic syntax checking and linting, to integration tests that check for the
presence of resources in the catalog, to acceptance-level tests that check
the end-state of the system to make sure Puppet left it in a state that&rsquo;s
acceptable).  The most common tools for these types of tests are:</p>

<ul>
<li><a href="http://puppet-lint.com">Puppet-lint</a></li>
<li><a href="http://rspec-puppet.com">Rspec-puppet</a></li>
<li><a href="http://github.com/puppetlabs/beaker">Beaker</a></li>
<li><a href="https://github.com/serverspec/serverspec">Serverspec</a></li>
<li>And more&hellip;</li>
</ul>


<p>Unfortunately, the point of this section is NOT to walk you through setting up
one or more of those tools (I&rsquo;d love to write those posts soon&hellip;), but rather
to make you aware of their presence and identify where they fit in our Pipeline.</p>

<p>Once you&rsquo;ve synchronized/deployed code changes to a specific machine (or
subset of machines), the next step is to trigger tests.</p>

<p>Backing up the train a bit, certain kinds of &lsquo;tests&rsquo; should be done WELL in
advance of this step. For example, if code changes don&rsquo;t even pass basic syntax
checking and linting, they shouldn&rsquo;t even MAKE it into your repository. Things
like pre-commit hooks will allow you to trigger syntactical checks and linting
before a commit is allowed. We&rsquo;re assuming you&rsquo;ve already set those up (and
if you&rsquo;ve NOT, then you should probably do that RIGHT NOW).</p>

<p>Rather, in this section, we&rsquo;re talking about doing some basic integration
smoke testing (i.e. running the rspec-puppet tests on all the modules to ensure
that what we EXPECT in the catalog is actually IN the catalog), moving into
acceptance level testing (i.e. spinning up pristine/clean nodes, actually
applying the Puppet code to the nodes, and then running things like Beaker
or Serverspec on the nodes to check the end-state of things like services, open
ports, configuration files, and whatever to ensure that Puppet ACTUALLY left
the system in a workable state), and then returning a &ldquo;PASS&rdquo; or
&ldquo;FAIL&rdquo; response to Jenkins (or whatever is controlling your pipeline).</p>

<p>These tests can be as thorough or as loose as is acceptable to you (obviously,
the goal is to automate ALL of your tests so you don&rsquo;t have to manually check
ANY changes, but that&rsquo;s the nerd-nirvana state where we&rsquo;re all browsing the web
all day), but they should catch the most NOTORIOUS and OBVIOUS things FIRST.
Follow the same rules you did when you got started with Puppet &ndash; catch the
things that are easiest to catch and start building up your cache of &ldquo;Total
Time Saved.&rdquo;</p>

<p>Jenkins needs to be able to trigger these tests from wherever it&rsquo;s running,
so your Jenkins box needs the ability to, say, spin up nodes in ESX, or
locally with something like Vagrant, or even cloud nodes in EC2 or GCE, then
TRIGGER the tests, and finally get a &ldquo;PASS&rdquo; or &ldquo;FAIL&rdquo; response back. The
HARDEST part here, by far, is that you have to define what level of testing
you&rsquo;re going to implement, how you&rsquo;re going to implement it, and devise
the actual process to perform the testing. Like I said before, there are other
blog posts that talk about this (and I hope to tackle this topic in the very
near future), so I&rsquo;ll leave it to them for the moment.</p>

<h3>To merge or not to merge</h3>

<p>The final step for any test code is to determine whether it should be merged
into production or not. Like I said before, if your tests are sufficient and
are adequate at determining whether a change is &lsquo;good&rsquo; or not, then you can
look at automating the process of merging those changes into production and
killing off the test branch (or, NOT merging those changes, and leaving the
branch open for more changes).</p>

<p>Automatically merging is scary for obvious reasons, but it&rsquo;s also a good &lsquo;test&rsquo;
for your test coverage. Committing to a &lsquo;merge upon success&rsquo; workflow takes
trust, and there&rsquo;s absolutely no shame in leaving this step to a human,
to a change review board, or to some out-of-band process.</p>

<h2>Use your illusion</h2>

<p>These are the most common questions I get asked after the initial shock of R10k,
and its workflow, wears off. Understand that I do these posts NOT from a &ldquo;Here&rsquo;s
what you should absolutely be doing!&rdquo; standpoint, but more from a &ldquo;Here&rsquo;s what&rsquo;s
going on out there.&rdquo; vantage. Every time I&rsquo;m called on-site with a customer, I
evaluate:</p>

<ul>
<li>The size and experience level of the team involved</li>
<li>The processes that the team must adhere to</li>
<li>The Puppet experience level of the team</li>
<li>The goals of the team</li>
</ul>


<p>Frankly, after all those observations, sometimes I ABSOLUTELY come to the
conclusion that something like R10k is entirely-too-much process for
not-enough benefit. For those who are a fit, though, we go down the checklists
and tailor the workflow to the environment.</p>

<h2>What more IS there on R10k?</h2>

<p>I do have at least a couple of more posts in me on some specific issues I&rsquo;ve
hit when consulting with companies using R10k, such as:</p>

<ul>
<li>How best to use Hiera and R10k with Puppet &lsquo;environments&rsquo; and internal, long-term &lsquo;environments&rsquo;</li>
<li>Better ideas on &lsquo;what to branch and why&rsquo; with regard to component modules and the puppet_repository</li>
<li>To inherit or not to inherit with Roles</li>
<li>How to name things (note that I work for Puppet Labs, so I&rsquo;m most likely very WRONG with this section)</li>
<li>Other random things I&rsquo;ve noticed&hellip;</li>
</ul>


<p>Also, I apologize if it&rsquo;s been awhile since I&rsquo;ve replied to a couple of
comments. I&rsquo;m booked out 3 months in advance and things are pretty wild at
the moment, but I&rsquo;m REALLY thankful of everyone who cares enough to drop a
note, and I hope I&rsquo;m providing some good info you can actually use! Cheers!</p>
]]></content>
  </entry>
  
</feed>
