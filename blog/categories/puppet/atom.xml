<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: puppet | Shit Gary Says]]></title>
  <link href="http://garylarizza.com/blog/categories/puppet/atom.xml" rel="self"/>
  <link href="http://garylarizza.com/"/>
  <updated>2014-10-23T14:14:39+02:00</updated>
  <id>http://garylarizza.com/</id>
  <author>
    <name><![CDATA[Gary larizza]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Puppetconf 2014 Talk - The Refactor Dance]]></title>
    <link href="http://garylarizza.com/blog/2014/10/23/puppetconf-2014-talk/"/>
    <updated>2014-10-23T15:15:42+02:00</updated>
    <id>http://garylarizza.com/blog/2014/10/23/puppetconf-2014-talk</id>
    <content type="html"><![CDATA[<p>This year at Puppetconf 2014, I presented a 1.5 hour talk entitled &ldquo;The Refactor
Dance&rdquo; that comprised nearly EVERYTHING that I&rsquo;ve written about in my Puppet
Workflows series (from writing better component modules, to Roles/Profiles,
to Workflow, and lots of stories in-between) as well as a couple of bad words,
a pair of leather pants (trousers), and an Uber story that beats your Uber
story. It&rsquo;s long, informative, and you get to watch the sweat stains under my
arms grow in an attractive grey Puppet Labs shirt.  What&rsquo;s not to love?</p>

<p><a href="https://puppetlabs.com/presentations/workshop-doing-refactor-dance-making-your-puppet-modules-more-modular-gary-larizza">To watch the video, click here to check it out!</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Dependencies and Order]]></title>
    <link href="http://garylarizza.com/blog/2014/10/19/on-dependencies-and-order/"/>
    <updated>2014-10-19T15:09:53+02:00</updated>
    <id>http://garylarizza.com/blog/2014/10/19/on-dependencies-and-order</id>
    <content type="html"><![CDATA[<p>This blog post was born out of a number of conversations that I&rsquo;ve had about
Puppet, its dependency model, and why &lsquo;ordering&rsquo; is not necessarily the way to
think about dependencies when writing Puppet manifests. Like most everything on
this site, I&rsquo;m getting it down in a file so I don&rsquo;t have to repeat this all over
again the next time someone asks. Instead, I can point them to this page (and,
when they don&rsquo;t actually <strong>READ</strong> this page, I can end up explaining everything
I&rsquo;ve written here anyways&hellip;).</p>

<p>Before we go any further, let me define a couple of terms:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies     &ndash; In a nutshell, what happens when you use the metaparameters of&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>               'before', 'require', 'subscribe' or 'notify' on resources in a
</span><span class='line'>               Puppet manifest: it's a chain of resources that are to be
</span><span class='line'>               evaluted in a specific order every time Puppet runs. Any failure
</span><span class='line'>               of a resource in this chain stops Puppet from evaluating the
</span><span class='line'>               remaining resources in the chain.
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>evaluate         &ndash; When Puppet determines the &lsquo;is&rsquo; value (or current state) of a&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>               resource (i.e. for package resources, "is the package installed?")
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>remediate        &ndash; When Puppet determines that the &lsquo;is&rsquo; value (or current state of&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>               the resource) is different from the 'should' value (or the value
</span><span class='line'>               entered into the Puppet manifest...the way the resource SHOULD
</span><span class='line'>               end up looking on the system) and Puppet needs to make a change.
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>declarative(ish) &ndash; When I use the word &lsquo;declarative(ish)&rsquo;, I mean that the order&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>               by which Puppet evaluates resources that do not contain dependencies
</span><span class='line'>               does not have a set procedure/order. The way Puppet EVALUATES
</span><span class='line'>               resources does not have a set procedure/order, but the order
</span><span class='line'>               that Puppet reads/parses manifest files IS from top-to-bottom
</span><span class='line'>               (which is why variables in Puppet manifests need to be declared
</span><span class='line'>               before they can be used).
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Why Puppet doesn&rsquo;t care about execution order (until it does)</h2>

<p>The biggest shock to the system when getting started with a declarative (ish)
configuration management tool like Puppet is understanding that Puppet describes
the end-state of the machine, and NOT the order that it&rsquo;s (Puppet) going to
take you to that state. To Puppet, the order that it chooses to affect change
in any resource (be it a file to be corrected, a package to be installed, or
any other resource type) is entirely arbitrary because resources that have no
relationship to another resource shouldn&rsquo;t CARE about the order in which they&rsquo;re
evaluated and remediated.</p>

<p>For example, imagine Puppet is going to create both <code>/etc/sudoers</code> and update
the system&rsquo;s authorized keys file to enter all the sysadmins' SSH keys. Which
one should it do first? In an imperative system like shell scripts or
a runbook-style system, you are forced to choose an order. So I ask again,
which one goes first? If you try to update the <code>sudoers</code> file in your script
first, and there&rsquo;s a problem with that update, then the script fails and the
SSH keys aren&rsquo;t installed. If you switch the order and there&rsquo;s a problem with
the SSH keys, then you can&rsquo;t <code>sudo</code> up because the <code>sudoers</code> file hasn&rsquo;t been
touched.</p>

<p>Because of this, Puppet has always taken the stance that if there are failures,
we want to get as much of the system into a working state as possible (i.e. any
resources that don&rsquo;t depend upon the failing resource are going to still be
evaluated, or &lsquo;inspected&rsquo;, and remediated, or &lsquo;changed if need be&rsquo;). There are
definitely philosophical differences here: the argument can be made that if there&rsquo;s
a failure somewhere, the system is bad and you should cast it off until you&rsquo;ve
fixed whatever the problem is (or the part of the code causing the problem). In
virtualized or &lsquo;cloud&rsquo; environments where everything is automated, this is just
fine, but in environments without complete and full automation, sometimes you
have to fix and deal with what you have. Puppet &ldquo;believes in your system&rdquo;, which
is borderline marketing-doubletalk for &ldquo;alert you of errors and give you time
to fix the damn thing and do another Puppet run without having to spin up a whole
new system.&rdquo;</p>

<p>Once you know WHY Puppet takes the stance it does, you realize that Puppet does
not give two shits about the order of resources without dependencies. If you
write perfect Puppet code, you&rsquo;re fine. But the majority of the
known-good-world does not do that. In fact, most of us write shit code. Which
was the problem&hellip;</p>

<h2>The history of Puppet&rsquo;s ordering choices</h2>

<h3>&lsquo;Random&rsquo; random order</h3>

<p>In the early days, the only resources that were guaranteed to have a consistent
order were those resources with dependencies (i.e. as I stated above, resources
that used the &lsquo;before&rsquo;, &lsquo;require&rsquo;, &lsquo;subscribe&rsquo;, or &lsquo;notify&rsquo; metaparameters to
establish an evaluation order). Every other resource was evaluted at random
every time that Puppet ran&hellip;which meant that you could run Puppet ten times
and, theoretically, resources without dependencies could be evaluated in
a different order between every Puppet run (we call this non-deterministic
ordering). This made things REALLY hard to debug.  Take the case where you had
a catalog of thousands of resources but you forgot a SINGLE dependency between
a couple of file resources. If you roll that change out to 1000 nodes, you
might have 10 or less of them fail (because Puppet chose an evaluation order
that ordered these two resources incorrectly). Imagine trying to figure out
what happened and replicate the problem. You could waste lots of time just
trying to REPLICATE the issue, even if it was a small fix like this.</p>

<p><strong>PROS</strong>:</p>

<ul>
<li>IS there a pro here?</li>
</ul>


<p><strong>CONS</strong>:</p>

<ul>
<li>Ordering could change between runs, and thus it was very hard to debug missing dependencies</li>
</ul>


<p>Philosophically, we were correct: resources that are to be evaluated in a certain
order require dependencies. Practically, we were creating more work for ourselves.</p>

<p>Incidentally, I&rsquo;d heard that Adam Jacob, who created Chef, had cited this reason
as one of the main motivators for creating Chef. I&rsquo;d heard that as a Puppet
consultant, he would run into these buried dependency errors and want to flip
tables. Even if it&rsquo;s not a true STORY, it was absolutely true for tables where
I used to work&hellip;</p>

<h3>Title-hash, &lsquo;Predictable&rsquo; random order</h3>

<p>Cut to Puppet version 2.7 where we introduced deterministic ordering with
&lsquo;title-hash&rsquo; ordering. In a nutshell, resources that didn&rsquo;t have dependencies
would still be executed in a random order, but the order Puppet chose could be
replicated (it created a SHA1 hash based on the titles of the resources without
dependencies, and ordered the hashes alphabetically). This meant that if you
tested out a catalog on a node, and then ran that same catalog on 1000 other
nodes, Puppet would choose the same order for all 1000 of the nodes. This
gave you the ability to actually TEST whether your changes would successfully
run in production. If you omitted a dependency, but Puppet managed to pick the
correct evaluation order, you STILL had a missing dependency, but you didn&rsquo;t
care about it because the code worked. The next change you made to the catalog
(by adding or removing resources), the order might change, but you would
discover and fix the dependency at that time.</p>

<p><strong>PROS</strong>:</p>

<ul>
<li>&lsquo;Predictable&rsquo; and repeatable order made testing possible</li>
</ul>


<p><strong>CONS</strong>:</p>

<ul>
<li>Easy to miss dependency omissions if Puppet chose the right order (but do you really care?)</li>
</ul>


<h3>Manifest ordering, the &lsquo;bath salts&rsquo; of ordering</h3>

<p>Title-hash ordering seemed like the best of both worlds &ndash; being opinionated about
resource dependencies but also giving sysadmins a reliable, and repeatable, way
to test evaluation order before it&rsquo;s pushed out to production.</p>

<p>Buuuuuuuuuut, y'all JUST weren&rsquo;t happy enough, were you?</p>

<p>When you move from an imperative solution like scripts to a declarative(ish)
solution like Puppet, it is absolutely a new way to think about modeling your
system. Frequently we heard that people were having issues with Puppet because
the order that resources shows up in a Puppet master WASN&rsquo;T the order that Puppet
would evaluate the resources. I just dropped a LOT of words explaining why this
isn&rsquo;t the case, but who really has the time to read up on all of this? People
were dismissing Puppet too quickly because their expectations of how the tool
worked didn&rsquo;t align with reality. The assumption, then, was to align these
expectations in the hopes that people wouldn&rsquo;t dismiss Puppet so quickly.</p>

<p><a href="http://puppetlabs.com/blog/introducing-manifest-ordered-resources">Eric Sorenson wrote a blog post on our thesis and experimentation</a>
around manifest ordering that is worth a read (and, incidentally, is shorter
than this damn post), but the short version is that we tested this theory out
and determined that Manifest Ordering would help new users to Puppet. Because
of this work, we created a feature called &lsquo;Manifest Ordering&rsquo; that stated that
resources that DID NOT HAVE DEPENDENCIES would be evaluated by Puppet in the
order that they showed up in the Puppet manifest (when read top to bottom). If
a resource truly does not have any dependencies, then you honestly should not
care one bit what order it&rsquo;s evaluated (because it doesn&rsquo;t matter).  Manifest
Ordering made ordering of resources without dependencies VERY predictable.</p>

<p>But&hellip;.</p>

<p>This doesn&rsquo;t mean I think it&rsquo;s the best thing in the world. In fact, I&rsquo;m really
wary of how I feel people will come to use Manifest Ordering. There&rsquo;s a reason
I called it the &ldquo;bath salts of ordering&rdquo; &ndash; because a little bit of it, when
used correctly, can be a lovely thing, but too much of it, used in unintended
circumstances, leads to hypothermia, paranoia, and the desire to gnaw someone
else&rsquo;s face off. We were/are giving you a way to bypass our dependency model by
using the mental-model you had with scripts, but ALSO telling you NOT to rely
on that mental-model (and instead set dependencies explicitly using metaparameters).</p>

<p>Seriously, what could go wrong?</p>

<p>Manifest Ordering is not a substitution for setting dependencies &ndash; that IS NOT
what it was created for. <strong>Puppet Labs still maintains that you should use
dependencies to order resources and NOT simply rely on Manifest Ordering as
a form of setting dependencies!</strong> Again, the problem is that you need to KNOW
this&hellip;and if Manifest Ordering allows you to keep the same imperative
&ldquo;mindset&rdquo; inside a declarative(ish) language, then eventually you&rsquo;re going to
experience pain (if not today, but possibly later when you actually try to
refactor code, or share code, or use this code on a system that ISN&rsquo;T using
Manifest Ordering). A declarative(ish) language like Puppet requires seeing
your systems according to the way their end-state will look and worrying about
WHAT the system will look like, and not necessarily HOW it will get there. Any
shortcut to understanding this process means you&rsquo;re going to miss key bits of
what makes Puppet a good tool for modeling this state.</p>

<p><strong>PROS:</strong></p>

<ul>
<li>Evaluation order of resources without dependencies is absolutely predictable</li>
</ul>


<p><strong>CONS:</strong></p>

<ul>
<li>If used as a substitution for setting dependencies, then refactoring code (moving around the order in which resources show up in a manifest) means changing the evaluation order</li>
</ul>


<h2>What should I actually take from this?</h2>

<p>Okay, here&rsquo;s a list of things you SHOULD be doing if you don&rsquo;t want to create
a problem for future-you or future-organization:</p>

<ul>
<li>Use dependency metaparameters like &lsquo;before&rsquo;, &lsquo;require&rsquo;, &lsquo;notify&rsquo;, and &lsquo;subscribe&rsquo; if resources in a catalog NEED to be evaluated in a particular order</li>
<li>Do not use Manifest Ordering as a substitute for explicitly setting dependencies (disable it if this is too tempting)</li>
<li>Use Roles and Profiles for a logical module layout (see: <a href="http://bit.ly/puppetworkflows2">http://bit.ly/puppetworkflows2</a> for information on Roles and Profiles)</li>
<li>Order individual components inside the Profile</li>
<li>Order Profiles (if necessary) inside the Role</li>
</ul>


<p>And, seriously, trust us with the explicit dependencies. It seems like a giant
pain in the ass initially, but you&rsquo;re ultimately documenting your infrastructure,
and a dependency (or, saying &lsquo;this thing MUST come before that thing&rsquo;) is a pretty
important decision. There&rsquo;s a REASON behind it &ndash; treat it with some more weight
other than having one line come before another line, ya know? The extra time
right now is absolutely going to buy you the time you spend at home with your
kids (and by &lsquo;kids&rsquo;, I mean &lsquo;XBox&rsquo;).</p>

<p>And don&rsquo;t use bath salts, folks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[R10k + Directory Environments]]></title>
    <link href="http://garylarizza.com/blog/2014/08/31/r10k-plus-directory-environments/"/>
    <updated>2014-08-31T21:00:00+02:00</updated>
    <id>http://garylarizza.com/blog/2014/08/31/r10k-plus-directory-environments</id>
    <content type="html"><![CDATA[<p>If you&rsquo;ve read anything I&rsquo;ve posted in the past year, you know my feelings about
the word &lsquo;environments&rsquo; and about how well we tend to name things here at
Puppet Labs (and if you don&rsquo;t, <a href="http://garylarizza.com/blog/2014/03/26/random-r10k-workflow-ideas/">you can check out that post here</a>).
Since then, Puppet Labs has released a new feature called <a href="https://docs.puppetlabs.com/puppet/latest/reference/environments.html">directory
environments (click this link for further reading)</a>
that replace the older &lsquo;config file environments&rsquo; that we all used to use (i.e.
stanzas in puppet.conf).  Directory environments weren&rsquo;t without their false
starts and issues, but further releases of Puppet, and their inclusion in
Puppet Enterprise 3.3.0, have allowed more people
to ask about them.  SO, I thought I&rsquo;d do a quick writeup about them&hellip;</p>

<h2>R10k had a child: Directory Environments</h2>

<p>The Puppet platform team had a couple of problems with config file environments
in puppet.conf &ndash; namely:</p>

<ul>
<li>Entering them in puppet.conf meant that you couldn&rsquo;t use environments named &lsquo;master&rsquo;, &lsquo;main&rsquo;, or &lsquo;agent&rsquo;</li>
<li>There was no easy/reliable way to determine all the available/used Puppet environments without making assumptions (and hacky code) &ndash; especially if someone were using R10k + dynamic environments</li>
<li>Adding more environments to <code>puppet.conf</code> made managing that file something of a nightmare (<code>environments.d</code> anyone?)</li>
</ul>


<p>Combine this with the fact that <a href="http://bit.ly/puppetworkflows3">most of the Professional Services team was
rolling out R10k to create dynamic environments</a> (which meant we
were abusing <code>$environment</code> inside <code>puppet.conf</code> and creating environments&hellip;well&hellip;
dynamically and on-the-fly), and they knew something needed to be done.
Because R10k was so popular and widely deployed, an environment solution that
was a simple step-up from an R10k deployment was made the target, and directory
environments were born.</p>

<h2>How does it work?</h2>

<p>Directory environments, essentially, are born out of a folder on the Puppet master
(typically <code>$confdir/environments</code>, where <code>$confdir</code> is <code>/etc/puppetlabs/puppet</code>
in Puppet Enterprise) wherein every subfolder is a new Puppet environment. Every
subfolder contains a couple of key items:</p>

<ul>
<li>A <code>modules</code> folder containing all modules for that environment</li>
<li>A <code>manifests/site.pp</code> file containing the site.pp file for that environment</li>
<li>A new <code>environment.conf</code> file which can be used to set the <code>modulepath</code>, the <code>environment_timeout</code>, and, a new and often-requested feature, the ability to have environment-specific <code>config_version</code> settings</li>
</ul>


<p>Basically, it&rsquo;s everything that R10k ALREADY does with a couple of added goodies
dropped into an <code>environment.conf</code> file. <a href="https://docs.puppetlabs.com/puppet/latest/reference/environments_configuring.html">Feel free to read the official docs
on configuring directory environments</a> for further information
on all of the goodies!</p>

<h2>Cool, how do we set it up?</h2>

<p>It wouldn&rsquo;t be one of my blog posts if it didn&rsquo;t include exact steps to configure
shit, would it? For this walkthrough, I&rsquo;m using a Centos 6.5 vm with DNS working
(i.e. the node can ping itself and knows its own hostname and FQDN), and I&rsquo;ve
already installed an All-in-one installation of Puppet Enterprise 3.3.0. For
the walkthrough, we&rsquo;re going to setup:</p>

<ul>
<li>Directory environments based on a control repo</li>
<li>Hiera data inside a <code>hieradata</code> folder in the control repo</li>
<li>Hiera to use the per-environment hieradata folder</li>
</ul>


<p>Let&rsquo;s start to break down the components:</p>

<h3>The &lsquo;Control Repo&rsquo;?</h3>

<p>Sometime between <a href="http://bit.ly/puppetworkflows3">my initial R10k post</a> and THIS post, the Puppet Labs PS
team has come to call the repository that contains the Puppetfile and is used
to track Puppet environments on all Puppet masters the &lsquo;Control Repo&rsquo; (because
it &lsquo;Controls the creation of Puppet environments&rsquo;, ya dig?  Zack Smith and
James Sweeny are actually pretty tickled about making that name stick). For
the purpose of this demonstration, I&rsquo;m using a repository on Github:</p>

<p><a href="https://github.com/glarizza/puppet_repository">https://github.com/glarizza/puppet_repository</a></p>

<p>Everything you will need for this walkthrough is in that repository, and we
will refer to it frequently. You DO NOT need to use my repository, and it&rsquo;s
definitely going to be required that you create your OWN, but it&rsquo;s there
for reference purposes (and to give you a couple of Puppet manifests to
make setup a bit easier).</p>

<h3>Configuring the Puppet master</h3>

<p>We&rsquo;re going to first clone my control repo to <code>/tmp</code> so we can use it to
configure R10k and the Puppet master itself:</p>

<p>```
[root@master ~]# cd /tmp</p>

<p>[root@master /tmp]# git clone <a href="https://github.com/glarizza/puppet_repository.git">https://github.com/glarizza/puppet_repository.git</a>
Initialized empty Git repository in /tmp/puppet_repository/.git/
remote: Counting objects: 164, done.
remote: Compressing objects: 100% (134/134), done.
remote: Total 164 (delta 54), reused 81 (delta 16)
Receiving objects: 100% (164/164), 22.68 KiB, done.
Resolving deltas: 100% (54/54), done.</p>

<p>[root@master /tmp]# cd puppet_repository
```</p>

<p>Great, I&rsquo;ve cloned my repo. To configure R10k, we&rsquo;re going to need to pull
down Zack Smith&rsquo;s R10k module from the forge with <code>puppet module install zack/r10k</code>
and then use <code>puppet apply</code> on a manifest in my repo with
<code>puppet apply configure_r10k.pp</code>.  <strong>DO NOTE: If you want to use YOUR Control
Repo, and NOT the one I use on Github, then you need to modify the
<code>configure_r10k.pp</code> file and replace the <code>remote</code> property with the URL to
YOUR Control Repo that&rsquo;s housed on a git repository!</strong></p>

<p>```
[root@master /tmp/puppet_repository:production]# puppet module install zack/r10k</p>

<p>Notice: Preparing to install into /etc/puppetlabs/puppet/modules &hellip;
Notice: Downloading from <a href="https://forgeapi.puppetlabs.com">https://forgeapi.puppetlabs.com</a> &hellip;
Notice: Found at least one version of puppetlabs-stdlib compatible with PE (3.3.0);
Notice: Skipping versions which don&rsquo;t express PE compatibility. To install
the most recent version of the module regardless of compatibility
with PE, use the &lsquo;&mdash;ignore-requirements&rsquo; flag.
Notice: Found at least one version of puppetlabs-inifile compatible with PE (3.3.0);
Notice: Skipping versions which don&rsquo;t express PE compatibility. To install
the most recent version of the module regardless of compatibility
with PE, use the &lsquo;&mdash;ignore-requirements&rsquo; flag.
Notice: Found at least one version of puppetlabs-vcsrepo compatible with PE (3.3.0);
Notice: Skipping versions which don&rsquo;t express PE compatibility. To install
the most recent version of the module regardless of compatibility
with PE, use the &lsquo;&mdash;ignore-requirements&rsquo; flag.
Notice: Found at least one version of puppetlabs-concat compatible with PE (3.3.0);
Notice: Skipping versions which don&rsquo;t express PE compatibility. To install
the most recent version of the module regardless of compatibility
with PE, use the &lsquo;&mdash;ignore-requirements&rsquo; flag.
Notice: Installing &mdash; do not interrupt &hellip;
/etc/puppetlabs/puppet/modules
└─┬ zack-r10k (v2.2.7)
  ├─┬ gentoo-portage (v2.2.0)
  │ └── puppetlabs-concat (v1.0.3) [/opt/puppet/share/puppet/modules]
  ├── mhuffnagle-make (v0.0.2)
  ├── puppetlabs-gcc (v0.2.0)
  ├── puppetlabs-git (v0.2.0)
  ├── puppetlabs-inifile (v1.1.0) [/opt/puppet/share/puppet/modules]
  ├── puppetlabs-pe_gem (v0.0.1)
  ├── puppetlabs-ruby (v0.2.1)
  ├── puppetlabs-stdlib (v3.2.2) [/opt/puppet/share/puppet/modules]
  └── puppetlabs-vcsrepo (v1.1.0)</p>

<p>[root@master /tmp/puppet_repository:production]# puppet apply configure_r10k.pp</p>

<p>Notice: Compiled catalog for master.puppetlabs.vm in environment production in 0.71 seconds
Warning: The package type&rsquo;s allow_virtual parameter will be changing its default value from false to true in a future release. If you do not want to allow virtual packages, please explicitly set allow_virtual to false.
   (at /opt/puppet/lib/ruby/site_ruby/1.9.1/puppet/type.rb:816:in `set_default')
Notice: /Stage[main]/R10k::Install/Package[r10k]/ensure: created
Notice: /Stage[main]/R10k::Install::Pe_gem/File[/usr/bin/r10k]/ensure: created
Notice: /Stage[main]/R10k::Config/File[r10k.yaml]/ensure: defined content as &lsquo;{md5}5cda58e8a01e7ff12544d30105d13a2a&rsquo;
Notice: Finished catalog run in 11.24 seconds
```</p>

<p>Performing those commands will successfully setup R10k to point to my Control
Repo out on Github (and, again, if you don&rsquo;t WANT that, then you need to make
the change to the <code>remote</code> property in <code>configure_r10k.pp</code>). We next need to
configure Directory Environments in <code>puppet.conf</code> by setting two attributes:</p>

<ul>
<li><code>environmentpath</code> (Or the path to the folder containing environments)</li>
<li><code>basemodulepath</code> (Or, the set of modules that will be shared across ALL ENVIRONMENTS)</li>
</ul>


<p>I have created a Puppet manifest that will set these attributes, and this
manifest requires the <code>puppetlabs/inifile</code> module from the Puppet Forge.
Fortunately, since I&rsquo;m using Puppet Enterprise, that module is already installed.
If you&rsquo;re using open source Puppet and the module is NOT installed, feel free
to install it by running <code>puppet module install puppetlabs/inifile</code>. Once
this is done, go ahead and execute the manifest by running
<code>puppet apply configure_directory_environments.pp</code>:</p>

<p>```
[root@master /tmp/puppet_repository:production]# puppet apply configure_directory_environments.pp</p>

<p>Notice: Compiled catalog for master.puppetlabs.vm in environment production in 0.05 seconds
Notice: /Stage[main]/Main/Ini_setting[Configure environmentpath]/ensure: created
Notice: /Stage[main]/Main/Ini_setting[Configure basemodulepath]/value: value changed &lsquo;/etc/puppetlabs/puppet/modules:/opt/puppet/share/puppet/modules&rsquo; to &lsquo;$confdir/modules:/opt/puppet/share/puppet/modules&rsquo;
Notice: Finished catalog run in 0.20 seconds
```</p>

<p>The last step to configuring the Puppet master is to execute an R10k run.
We can do that by running <code>r10k deploy environment -pv</code>:</p>

<p>```
[root@master /tmp/puppet_repository:production]# r10k deploy environment -pv</p>

<p>[R10K::Source::Git &ndash; INFO] Determining current branches for &ldquo;<a href="https://github.com/glarizza/puppet_repository.git">https://github.com/glarizza/puppet_repository.git</a>&rdquo;
[R10K::Task::Environment::Deploy &ndash; NOTICE] Deploying environment production
[R10K::Task::Puppetfile::Sync &ndash; INFO] Loading modules from Puppetfile into queue
[R10K::Task::Module::Sync &ndash; INFO] Deploying profiles into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying notifyme into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying ntp into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying apache into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying profiles into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying notifyme into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying ntp into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying apache into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Environment::Deploy &ndash; NOTICE] Deploying environment webinar_env
[R10K::Task::Puppetfile::Sync &ndash; INFO] Loading modules from Puppetfile into queue
[R10K::Task::Module::Sync &ndash; INFO] Deploying profiles into /etc/puppetlabs/puppet/environments/webinar_env/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying notifyme into /etc/puppetlabs/puppet/environments/webinar_env/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying haproxy into /etc/puppetlabs/puppet/environments/webinar_env/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying mysql into /etc/puppetlabs/puppet/environments/webinar_env/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying ntp into /etc/puppetlabs/puppet/environments/webinar_env/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying apache into /etc/puppetlabs/puppet/environments/webinar_env/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying profiles into /etc/puppetlabs/puppet/environments/webinar_env/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying notifyme into /etc/puppetlabs/puppet/environments/webinar_env/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying haproxy into /etc/puppetlabs/puppet/environments/webinar_env/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying mysql into /etc/puppetlabs/puppet/environments/webinar_env/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying ntp into /etc/puppetlabs/puppet/environments/webinar_env/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying apache into /etc/puppetlabs/puppet/environments/webinar_env/modules
[R10K::Task::Deployment::PurgeEnvironments &ndash; INFO] Purging stale environments from /etc/puppetlabs/puppet/environments
```</p>

<p>Great!  Everything should be setup (if you&rsquo;re using my repo)!  My repository has
a production branch, which is what Puppet&rsquo;s default environment is named,
so we can test that everything works by listing out all modules in the main
production environment with the <code>puppet module list</code> command:</p>

<p>```
[root@master /tmp/puppet_repository:production]# puppet module list</p>

<p>Warning: Module &lsquo;puppetlabs-stdlib&rsquo; (v3.2.2) fails to meet some dependencies:
  &lsquo;puppetlabs-ntp&rsquo; (v3.1.2) requires &lsquo;puppetlabs-stdlib&rsquo; (>= 4.0.0)
/etc/puppetlabs/puppet/environments/production/modules
├── notifyme (???)
├── profiles (???)
├── puppetlabs-apache (v1.1.1)
└── puppetlabs-ntp (v3.1.2)
/etc/puppetlabs/puppet/modules
├── gentoo-portage (v2.2.0)
├── mhuffnagle-make (v0.0.2)
├── puppetlabs-gcc (v0.2.0)
├── puppetlabs-git (v0.2.0)
├── puppetlabs-pe_gem (v0.0.1)
├── puppetlabs-ruby (v0.2.1)
├── puppetlabs-vcsrepo (v1.1.0)
└── zack-r10k (v2.2.7)
/opt/puppet/share/puppet/modules
├── puppetlabs-apt (v1.5.0)
├── puppetlabs-auth_conf (v0.2.2)
├── puppetlabs-concat (v1.0.3)
├── puppetlabs-firewall (v1.1.2)
├── puppetlabs-inifile (v1.1.0)
├── puppetlabs-java_ks (v1.2.4)
├── puppetlabs-pe_accounts (v2.0.2-3-ge71b5a0)
├── puppetlabs-pe_console_prune (v0.1.1-4-g293f45b)
├── puppetlabs-pe_mcollective (v0.2.10-15-gb8343bb)
├── puppetlabs-pe_postgresql (v1.0.4-4-g0bcffae)
├── puppetlabs-pe_puppetdb (v1.1.1-7-g8cb11bf)
├── puppetlabs-pe_razor (v0.2.1-1-g80acb4d)
├── puppetlabs-pe_repo (v0.7.7-32-gfd1c97f)
├── puppetlabs-pe_staging (v0.3.3-2-g3ed56f8)
├── puppetlabs-postgresql (v2.5.0-pe2)
├── puppetlabs-puppet_enterprise (v3.2.1-27-g8f61956)
├── puppetlabs-reboot (v0.1.4)
├── puppetlabs-request_manager (v0.1.1)
└── puppetlabs-stdlib (v3.2.2)  invalid
```</p>

<p>Notice a couple of things:</p>

<ul>
<li>First, I&rsquo;ve got some dependency issues&hellip;oh well, nothing that&rsquo;s a game-stopper</li>
<li>Second, the path to the production environment&rsquo;s module is correct at: <code>/etc/puppetlabs/puppet/environments/production/modules</code></li>
</ul>


<h3>Configuring Hiera</h3>

<p>The last dinghy to be configured on this dreamboat is Hiera. Hiera is Puppet&rsquo;s
data lookup mechanism, and is used to gather specific bits of data (such
as versions of packages, hostnames, passwords, and other business-specific
data). Explaining HOW Hiera works is beyond the scope of this article, but
configuring Hiera data on a per-environment basis IS absolutely a worthwhile
endeavor.</p>

<p>In this example, I&rsquo;m going to demonstrate coupling Hiera data with the Control
Repo for simple replication of Hiera data across environments. You COULD also
choose to put your Hiera data in a separate repository and set it up in
<code>/etc/r10k.yaml</code> as another source, but that exercise is left to the reader
<a href="http://bit.ly/puppetworkflows3b">(and if you&rsquo;re interested, I talk about it in this post).</a></p>

<p>You&rsquo;ll notice that my demonstration repository ALREADY includes Hiera data,
and so that data is automatically being replicated to all environments. By
default, Hiera&rsquo;s configuration file (<code>hiera.yaml</code>) has no YAML data directory
specified, so we&rsquo;ll need to make that change.  <a href="https://github.com/glarizza/puppet_repository/blob/production/hiera.yaml">In my demonstration control
repository, I&rsquo;ve included a sample <code>hiera.yaml</code>,</a> but let&rsquo;s take a look at
one below:</p>

<p>```yaml</p>

<h2>/etc/puppetlabs/puppet/hiera.yaml</h2>

<hr />

<p>:backends:
  &ndash; yaml
:hierarchy:
  &ndash; &ldquo;%{clientcert}&rdquo;
  &ndash; &ldquo;%{application_tier}&rdquo;
  &ndash; common</p>

<p>:yaml:</p>

<h1>datadir is empty here, so hiera uses its defaults:</h1>

<h1>&ndash; /var/lib/hiera on *nix</h1>

<h1>&ndash; %CommonAppData%\PuppetLabs\hiera\var on Windows</h1>

<h1>When specifying a datadir, make sure the directory exists.</h1>

<p>  :datadir: &ldquo;/etc/puppetlabs/puppet/environments/%{environment}/hieradata&rdquo;
```</p>

<p>This hiera.yaml file specifies a hierarchy with three levels &ndash; a node-specific,
level, a level for different application tiers (like &lsquo;dev&rsquo;, &lsquo;test&rsquo;, &lsquo;prod&rsquo;, and
etc), and finally makes the change we need: mapping the data directory to each
environment&rsquo;s hieradata folder.  The path to <code>hiera.yaml</code> is Puppet&rsquo;s
configuration directory (which is <code>/etc/puppetlabs/puppet</code> for Puppet
Enterprise, or <code>/etc/puppet</code> for the open source version of Puppet), so open
the file there, make your changes, and finally you&rsquo;ll need to need to restart
the Puppet master service to have the changes picked up.</p>

<p>Next, let&rsquo;s perform a test by executing the <code>hiera</code> binary from the command
line before running puppet:</p>

<p>```
[root@master /etc/puppetlabs/puppet/environments]# hiera message environment=production
This node is using common data</p>

<p>[root@master /etc/puppetlabs/puppet/environments]# hiera message environment=webinar_env -d
DEBUG: 2014-08-31 19:55:44 +0000: Hiera YAML backend starting
DEBUG: 2014-08-31 19:55:44 +0000: Looking up message in YAML backend
DEBUG: 2014-08-31 19:55:44 +0000: Looking for data source common
DEBUG: 2014-08-31 19:55:44 +0000: Found message in common
This node is using common data</p>

<p>[root@master /etc/puppetlabs/puppet/environments]# hiera message environment=bad_env -d
DEBUG: 2014-08-31 19:58:22 +0000: Hiera YAML backend starting
DEBUG: 2014-08-31 19:58:22 +0000: Looking up message in YAML backend
DEBUG: 2014-08-31 19:58:22 +0000: Looking for data source common
DEBUG: 2014-08-31 19:58:22 +0000: Cannot find datafile /etc/puppetlabs/puppet/environments/bad_env/hieradata/common.yaml, skipping
nil
```</p>

<p>You can see that for the first example, I passed the environment of <code>production</code>
and did a simple lookup for a key called <code>message</code> &ndash; Hiera then returned me
the value of out that environment&rsquo;s <code>common.yaml</code> file.  Next, I did another
lookup, but added <code>-d</code> to enable debug mode (debug mode on the <code>hiera</code>
binary is REALLY handy for debugging problems with Hiera &ndash; combine it with
specifying values from the command line, and you can pretty quickly simulate
what value a node is going to get).  Notice the last example where I specified
an invalid environment &ndash; Hiera logged that it couldn&rsquo;t find the datafile
requested and ultimately returned a nil, or empty, value.</p>

<p>Since we&rsquo;re working on the Puppet master machine, we can even check for a value
using <code>puppet apply</code> combined with the notice function:</p>

<p><code>
[root@master /etc/puppetlabs/puppet/environments]# puppet apply -e "notice(hiera('message'))"
Notice: Scope(Class[main]): This node is using common data
Notice: Compiled catalog for master.puppetlabs.vm in environment production in 0.09 seconds
Notice: Finished catalog run in 0.19 seconds
</code></p>

<p>Great, it&rsquo;s working, but let&rsquo;s look at pulling data from a higher level in the
hierarchy &ndash; like from the <code>application_tier</code> level. We haven&rsquo;t defined an
<code>application_tier</code> fact, however, so we&rsquo;ll need to fake it. First, let&rsquo;s do
that with the <code>hiera</code> binary:</p>

<p><code>
[root@master /etc/puppetlabs/puppet/environments]# hiera message environment=production application_tier=dev -d
DEBUG: 2014-08-31 20:04:12 +0000: Hiera YAML backend starting
DEBUG: 2014-08-31 20:04:12 +0000: Looking up message in YAML backend
DEBUG: 2014-08-31 20:04:12 +0000: Looking for data source dev
DEBUG: 2014-08-31 20:04:12 +0000: Found message in dev
You are in the development application tier
</code></p>

<p>And then also with <code>puppet apply</code>:</p>

<p><code>
[root@master /etc/puppetlabs/puppet/environments]# FACTER_application_tier=dev puppet apply -e "notice(hiera('message'))"
Notice: Scope(Class[main]): You are in the development application tier
Notice: Compiled catalog for master.puppetlabs.vm in environment production in 0.09 seconds
Notice: Finished catalog run in 0.18 seconds
</code></p>

<h2>Tuning <code>environment.conf</code></h2>

<p>The brand-new, per-environment  <code>environment.conf</code> file is meant to be (for
the most part) a one-stop-shop for your Puppet environment tuning needs. Right
now, the only things you&rsquo;ll need to tune will be the <code>modulepath</code>,
<code>config_version</code>, and possibly the <code>environment_timeout</code>.</p>

<h3>Module path</h3>

<p>Before directory environments, every environment had its own <code>modulepath</code> that
needed to be tuned to allow for modules that were to be used by this
machine/environment, as well as shared modules.  That <code>modulepath</code> worked like
<code>$PATH</code> in that it was a priority-based lookup for modules (i.e. the first
directory in <code>modulepath</code> that had a module matching the module name you wanted
won).  It also previously required the FULL path to be used for every path in
<code>modulepath</code>.</p>

<p>Those days are over.</p>

<p>As I mentioned before, the main <code>puppet.conf</code> configuration file has a new
parameter called <code>basemodulepath</code> that can be used to specify modules that are
to be shared across ALL modules in ALL environments. Paths defined here
(typically <code>$confdir/modules</code> and <code>/opt/puppet/share/puppet/modules</code>) are
usually put at the END of a <code>modulepath</code> so Puppet can search for any
overridden modules that show up in earlier <code>modulepath</code> paths. In the previous
configuration steps, we executed a manifest that setup <code>basemodulepath</code> to
look like:</p>

<p><code>
basemodulepath = $confdir/modules:/opt/puppet/share/puppet/modules
</code></p>

<p>Again, feel free to add or remove paths (except don&rsquo;t remove
<code>/opt/puppet/share/puppet/modules</code> if you&rsquo;re using Puppet Enterprise, because
that&rsquo;s where all Puppet Enterprise modules are located), especially if you&rsquo;re
using a giant monolithic repo of modules (which was typically done before things
like R10k evolved).</p>

<p>With <code>basemodulepath</code> configured, it&rsquo;s now time to configure the <code>modulepath</code>
to be defined for every environment. My demonstration control repo contains
a sample <code>environment.conf</code> that defines a <code>modulepath</code> like so:</p>

<p><code>
modulepath = modules:$basemodulepath
</code></p>

<p>You&rsquo;ll notice, now, that there are relative paths in <code>modulepath</code>. This is
possible because now each environment contains an <code>environment.conf</code>, and thus
relative paths make sense. In this example, nodes in the production environment
(<code>/etc/puppetlabs/puppet/environments/production</code>) will look for a module by its
name FIRST by looking in a folder called <code>modules</code> inside the current
environment folder (i.e. <code>/etc/puppetlabs/puppet/environments/production/modules/&lt;module_name&gt;</code>).
If the module wasn&rsquo;t found there, it looks for the module in the order that
paths are defined for <code>basemodulepath</code> above. If Puppet fails to find a module
in ANY of the paths, a compile error is raised.</p>

<h3>Per-environment <code>config_version</code></h3>

<p><a href="https://docs.puppetlabs.com/references/stable/configuration.html#configversion">Setting <code>config_version</code> has been around for awhile</a> &ndash; hell,
I remember video of Jeff McCune talking about it at the first Puppetcamp Europe
in like 2010 &ndash; but the new directory environments implementation has fine
tuned it a bit. Previously, <code>config_version</code> was a command executed on the
Puppet master at compile time to determine a string used for versioning the
configuration enforced during that Puppet run. When it&rsquo;s not set it defaults
to something of a time/date stamp off the parser, but it&rsquo;s way more useful to
make it do something like determine the most recent commit hash from a repository.</p>

<p>In the past when we used a giant monolithic repository containing all Puppet
modules, it was SUPER easy to get a single commit hash and be done. As everyone
moved their modules into individual repositories, determining <em>WHAT</em> you were
enforcing became harder. With the birth of R10k an the control repo, we
suddenly had something we could query for the state of our modules being
enforced. The problem existed, though, that with multiple dynamic environments
using multiple git branches, <code>config_version</code> wasn&rsquo;t easily tuned to be able
to grab the most recent commit from every branch.</p>

<p>Now that <code>config_version</code> is set in a per-environment <code>environment.conf</code>, we
can make <code>config_version</code> much smarter. Again, looking in the <code>environment.conf</code>
defined in my demonstration control repo produces this:</p>

<p><code>
config_version = '/usr/bin/git --git-dir $confdir/environments/$environment/.git rev-parse HEAD'
</code></p>

<p>This setting will cause the Puppet master to produce the most recent commit ID
for whatever environment you&rsquo;re in and embed it in the catalog and the report
that is sent back to the Puppet master after a Puppet run.</p>

<p><a href="https://tickets.puppetlabs.com/browse/PUP-3150">I actually discovered a bug in <code>config_version</code> while writing this post</a>,
and it&rsquo;s that <code>config_version</code> is subject to the relative pathing fun that other
<code>environment.conf</code> settings are subject to. Relative pathing is great for things like
<code>modulepath</code>, and it&rsquo;s even good for <code>config_version</code> if you&rsquo;re including the
script you want to run to gather the <code>config_version</code> string inside the control
repo, but using a one-line command that tries to execute a binary on the system
that DOESN&rsquo;T include the full path to the binary causes an error (because Puppet
attempts to look for that binary in the current environment path, and NOT by
searching <code>$PATH</code> on the system).  Feel free to follow or comment on the bug
if the mood hits you.</p>

<h3>Caching and environment_timeout</h3>

<p>The Puppet master loads environments on-request, but it also caches data associated
with each environment to make things faster. This caching is finally tunable on a
per-environment basis by defining the <code>environment_timeout</code> setting in
<code>environment.conf</code>.  The default setting is 3 minutes, which means the Puppet master
will invalidate its caches and reload environment data every 3 minutes, but that&rsquo;s
now tunable. <a href="https://docs.puppetlabs.com/puppet/3.6/reference/environments_configuring.html#environmenttimeout">Definitely read up on this setting before making changes.</a></p>

<h2>Classification</h2>

<p>One of the last new features of directory environments is the ability to include
an environment-specific <code>site.pp</code> file for classification. You could ALWAYS do
this by modifying the <code>manifest</code> configuration item in <code>puppet.conf</code>, but now
each environment can have its own <code>manifest</code> setting. The default behavior is
to have the Puppet master look for <code>manifests/site.pp</code> in every environment
directory, and I really wouldn&rsquo;t change that unless you have a good reason. DO
NOTE, however, that if you&rsquo;re using Puppet Enterprise, you&rsquo;ll need to be careful
with your <code>site.pp</code> file.  Puppet Enterprise defines things like the Filebucket
and overrides for the File resource in <code>site.pp</code>, so if you&rsquo;re using Puppet Enterprise,
you&rsquo;ll need to copy those changes into the <code>site.pp</code> file you add into your control
repo (as I did).</p>

<p>It may take you a couple of times to change your thinking from looking at the main
<code>site.pp</code> in <code>$confdir/manifests</code> to looking at each environment-specific <code>site.pp</code>
file, but definitely take advantage of Puppet&rsquo;s commandline tool to help you track
which <code>site.pp</code> Puppet is monitoring:</p>

<p>```
[root@master /etc/puppetlabs/puppet/environments]# puppet config print manifest
/etc/puppetlabs/puppet/environments/production/manifests</p>

<p>[root@master /etc/puppetlabs/puppet/environments]# puppet config print manifest &mdash;environment webinar_env
/etc/puppetlabs/puppet/environments/webinar_env/manifests
```</p>

<p>You can see that <code>puppet config print</code> can be used to get the path to the
directory that contains <code>site.pp</code>.  Even cooler is what happens when you
specify an environment that doesn&rsquo;t exist:</p>

<p><code>
[root@master /etc/puppetlabs/puppet/environments]# puppet config print manifest --environment bad_env
no_manifest
</code></p>

<p>Yep, Puppet tells you if it can&rsquo;t find the manifest file.  That&rsquo;s pretty cool.</p>

<h2>Wrapping Up</h2>

<p>Even though the new implementation of directory environments is meant to map
closely to a workflow most of us have been using (if you&rsquo;ve been using R10k, that is),
there are still some new features that may take you by surprise. Hopefully this
post gets you started with just enough information to setup your own test
environment and start playing. PLEASE DO make sure to file bugs on any behavior
that comes as unexpected or stops you from using your existing workflow. Cheers!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On R10k and 'Environments']]></title>
    <link href="http://garylarizza.com/blog/2014/03/26/random-r10k-workflow-ideas/"/>
    <updated>2014-03-26T09:00:00+01:00</updated>
    <id>http://garylarizza.com/blog/2014/03/26/random-r10k-workflow-ideas</id>
    <content type="html"><![CDATA[<p>There have been more than a couple of moments where I&rsquo;m on-site with a customer
who asks a seemingly simple question and I&rsquo;ve gone &ldquo;Oh shit; that&rsquo;s a great
question and I&rsquo;ve never thought of that&hellip;&rdquo;  Usually that&rsquo;s followed by me
changing up the workflow and immediately regretting things I&rsquo;ve done on prior
gigs. Some people call that &lsquo;agile&rsquo;; I call it &lsquo;me not having the
forethought to consider conditions properly&rsquo;.</p>

<h2>&lsquo;Environment&rsquo;, like &lsquo;scaling&rsquo;, &lsquo;agent&rsquo;, and &lsquo;test&rsquo;, has many meanings</h2>

<p>It&rsquo;s not a secret that we&rsquo;ve made some shitty decisions in the past with regard
to naming things in Puppet (and anyone who asks me what <code>puppet agent -t</code>
stands for usually gets a heavy sigh, a shaken head, and an explanation emitted
in dulcet, apologetic tones). It&rsquo;s also very easy to conflate certain concepts
that unfortunately share very common labels (quick &ndash; what&rsquo;s the difference
between properties and parameters, and give me the lowdown on MCollective
agents versus Puppet agents!).</p>

<p>And then we have &lsquo;environments&rsquo; + Hiera + R10k.</p>

<h3>Puppet &lsquo;environments&rsquo;</h3>

<p>Puppet has the concept of &lsquo;environments&rsquo;, which, to me, exist to provide a
means of compiling a catalog using different paths to Puppet modules on the
Puppet master. Using a Puppet environment is the same as saying &ldquo;I made some
changes to my tomcat class, but I don&rsquo;t want to push it DIRECTLY to my production
machines yet because I don&rsquo;t drink Dos Equis. It would be great if I could stick
this code somewhere and have a couple of my nodes test how it works before
merging it in!&rdquo;</p>

<p>Puppet environments suffer some &lsquo;seepage&rsquo; issues,
<a href="http://projects.puppetlabs.com/issues/12173">which you can read about here,</a> but do a reasonable job of quickly
testing out changes you&rsquo;ve made to the Puppet DSL (as opposed to custom
plugins, as detailed in the bug). Puppet environments work well when you
need a pipeline for testing your Puppet code (again, when you&rsquo;re refactoring
or adding new functionality), and using them for that purpose is great.</p>

<h3>Internal &lsquo;environments&rsquo;</h3>

<p>What I consider &lsquo;internal environments&rsquo; have a couple of names &ndash; sometimes
they&rsquo;re referred to as application or deployment gateways, sometimes as &lsquo;tiers&rsquo;, but
in general they&rsquo;re long-term groupings that machines/nodes are attached to
(usually for the purpose of phased-out application deployments). They
frequently have names such as &lsquo;dev&rsquo;, &lsquo;test&rsquo;, &lsquo;prod&rsquo;, &lsquo;qa&rsquo;, &lsquo;uat&rsquo;, and the
like.</p>

<p>For the purpose of distinguishing them from Puppet environments, I&rsquo;m going to
refer to them as &lsquo;application tiers&rsquo; or just &lsquo;tiers&rsquo; because, fuck it, it&rsquo;s a
word.</p>

<h3>Making both of them work</h3>

<p>The problems with having Puppet environments and application tiers are:</p>

<ul>
<li>Puppet environments are usually assigned to a node for short periods of time,
while application tiers are usually assigned to a node for the life of the node.</li>
<li>Application tiers usually need different bits of data (i.e. NTP server
addresses, versions of packages, etc), while Puppet environments usually
use/involve differences to the Puppet DSL.</li>
<li>Similarly to the first point, the goal of Puppet environments is to eventually
merge code differences into the main production Puppet environment. Application
tiers, however, may always have differences about them and never become unified.</li>
</ul>


<p>You can see where this would be problematic &ndash; especially when you might want to
do things like use different Hiera values between different application tiers,
but you want to TEST out those values before applying them to all nodes in an
application tier. If you previously didn&rsquo;t have a way to separate Puppet
environments from application tiers, and you used R10k to generate Puppet
environments, you would have things like long-term branches in your repositories
that would make it difficult/annoying to manage.</p>

<p><strong>NOTE: This is all assuming you&rsquo;re managing component modules, Hiera data,
and Puppet environments using R10k.</strong></p>

<p>The first step in making both monikers work together is to have two separate
variables in Puppet &ndash; namely <code>$environment</code> for Puppet environments, and
something ELSE (say, <code>$tier</code>) for the application tier. The &ldquo;something else&rdquo; is
going to depend on how your workflow works. For example, do you have something
centrally that can correlate nodes to the tier in which they belong? If so, you
can write a custom fact that will query that service. If you don&rsquo;t have this
magical service, you can always just attach an application tier to a node in
your classification service (i.e. the Puppet Enterprise Console or Foreman).
Failing both of those, <a href="http://docs.puppetlabs.com/guides/custom_facts.html#external-facts">you can look to external facts.</a> External Fact
support was introduced into Facter 1.7 (but Puppet Enterprise has supported
them through the standard lib for quite awhile). External facts give you the
ability to create a text file inside the facts.d directory in the format of:</p>

<p><code>
tier=qa
location=portland
</code></p>

<p>Facter will read this text file and store the values as facts for a Puppet run,
so <code>$tier</code> will be <code>qa</code> and <code>$location</code> will be <code>portland</code>. This is handy for
when you have arbitrary information that can&rsquo;t be easily discovered by the
node, but DOES need to be assigned for the node on a reasonably consistent
basis.  Usually these files are created during the provisioning process, but
can also be managed by Puppet.  At any rate, having <code>$environment</code> and <code>$tier</code>
available allow us to start to make decisions based on the values.</p>

<h3>Branch with $environment, Hiera with $tier</h3>

<p>Like we said above, Puppet environments are frequently short-term assignments,
while application tiers are usually long-term residencies. Relating those back
to the R10k workflow: branches to the main puppet repo (containing the
<code>Puppetfile</code>) are usually short-lived, while data in Hiera is usually
longer-lived. It would then make sense that the name of the branches to the
main puppet repo would resolve to being <code>$environment</code> (and thus the Puppet
environment name), and <code>$tier</code> (and thus the application tier) would be used
in the Hiera hierarchy for lookups of values that would remain different across
application tiers (like package versions, credentials, and etc&hellip;).</p>

<p>Wins:</p>

<ul>
<li>Puppet environment names (like repository branch names) become relatively
meaningless and are the &ldquo;means&rdquo; to the end of getting Puppet code merged into
the PUPPET CODE&rsquo;s production branch (i.e. code that has been tested to work
across all application tiers)</li>
<li>Puppet environments become short lived and thus have less opportunity to
deviate from the main production codebase</li>
<li>Differences across application tiers are locked in one place (Hiera)</li>
<li>Differences to Puppet DSL code (i.e. in Manifests) can be pushed up to the
profile level, and you have a fact (<code>$tier</code>) to catch those differences.</li>
</ul>


<p>The ultimate reason why I&rsquo;m writing about this is because I&rsquo;ve seen people try
to incorporate both the Puppet environment and application tier into both the
environment name and/or the Hiera hierarchy. Many times, they run into all
kinds of unscalable issues (large hierarchies, many Puppet environments,
confusing testing paths to &lsquo;production&rsquo;). I tend to prefer this workflow
choice, but, like everything I write about, take it and model it toward what
works for you (because what works now may not work 6 months from now).</p>

<h2>Thoughts?</h2>

<p>Like I said before, I tend to discover new corner cases that change my mind
on things like this, so it&rsquo;s quite possible that this theory isn&rsquo;t the most
solid in the world. It HAS helped out some customers to clean up their code
and make for a cleaner pipeline, though, and that&rsquo;s always a good thing. Feel
free to comment below &ndash; I look forward to making the process better for all!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Functional Puppet Workflow Part 3b: More R10k Madness]]></title>
    <link href="http://garylarizza.com/blog/2014/03/07/puppet-workflow-part-3b/"/>
    <updated>2014-03-07T17:00:00+01:00</updated>
    <id>http://garylarizza.com/blog/2014/03/07/puppet-workflow-part-3b</id>
    <content type="html"><![CDATA[<p><a href="http://garylarizza.com/blog/2014/02/18/puppet-workflow-part-3/">In the last workflows post,</a> I talked about dynamic Puppet
environments and introduced R10k, which is an awesome tool for mapping modules
to their environments which are dynamically generated by git branches. I didn&rsquo;t
get out everything I wanted to say because:</p>

<ul>
<li>I was tired of that post sitting stale in a Google Doc</li>
<li>It was already goddamn long</li>
</ul>


<p>So because of that, consider this a continuation of that previous monstrosity
that talks about additional uses of R10k beyond the ordinary</p>

<h2>Let&rsquo;s talk Hiera</h2>

<p>But seriously, let&rsquo;s not actually talk about what Hiera does since
<a href="http://docs.puppetlabs.com/hiera/1/complete_example.html">there are better docs</a> out there for that. I&rsquo;m
also not going to talk about WHEN to use Hiera because
<a href="http://garylarizza.com/blog/2013/12/08/when-to-hiera/">I&rsquo;ve already done that before.</a> Instead, let&rsquo;s talk about a workflow
for submitting changes to Hiera data and testing it out before it enters into
production.</p>

<p>Most people store their Hiera data (if they&rsquo;re using a backend that reads Hiera
data from disk anyways) in separate repos as their Puppet repo. Some DO tie the
Hiera datadir folder to something like the main Puppet repo that houses their
<code>Puppetfie</code> (if they&rsquo;re using R10k), but for the most part it&rsquo;s a separate
repo because you may want separate permissions for accessing that data.
For the purposes of this post, I&rsquo;m going to refer to
<a href="https://github.com/glarizza/hiera_environment">a repository I use for storing Hiera data</a> that&rsquo;s out on Github.</p>

<p>The next logical step would be to integrate that Hiera repo into R10k so R10k can
track and create paths for Hiera data just like it did for Puppet.</p>

<p><strong>NOTE: Fundamentally, all that R10k does is checkout modules to a specific
path whose folder name comes from a git branch. PUPPET ties its environment
to this folder name with some <code>puppet.conf</code> trickery. So, to say that R10k
&ldquo;creates dynamic environments&rdquo; is the end-result, but not the actual job
of the tool.</strong></p>

<p>We COULD add Hiera&rsquo;s repository to the <code>/etc/r10k.yaml</code> file to track and
create folders for us, and if we did it EXACTLY like we did for Puppet we
would most definitely run into <a href="https://github.com/adrienthebo/r10k/issues/48">this R10k bug</a> (AND,
<a href="https://github.com/adrienthebo/r10k/issues/90">it comes up again in this bug</a>).</p>

<p><strong>UPDATE: So, I originally wrote this post BEFORE R10k version 1.1.4 was
released. Finch released version 1.1.4 which FIXES THESE BUGS&hellip;so the workflow
I&rsquo;m going to describe (i.e. using prefixing to solve the problem of using
multiple repos in <code>/etc/r10k.yaml</code> that could possibly share branch names)
TECHNICALLY does NOT need to be followed &lsquo;to the T&rsquo;, as it were. You can
disable prefixing when it comes to that step, and modify
<code>/etc/puppetlabs/puppet/hiera.yaml</code> so you don&rsquo;t prepend &lsquo;hiera_&rsquo; to the
path of each environment&rsquo;s folder, and you should be totally fine&hellip;you know,
as long as you use version 1.1.4 or greater of R10k.  So, be forewarned</strong></p>

<p>The issue is those bugs is that R10k collects the names of ALL the environments
from ALL the sources at once, so if you have multiple source repositories and
they share branch names, then you have clashes (since it only stores ONE branch
name internally). The solution that Finch came up with was prefixing (or,
prefixing the name of the branch with the name of the source). When you prefix,
however, it creates a folder on-disk that matches the prefixed name (e.g.
NameOfTheSource_NameOfTheBranch ). This is actually fine since we&rsquo;ll catch it
and deal with it, but you should be aware of it. Future versions of R10k may
most likely deal with this in a different manner, so make sure to check out the
R10k docs before blindly copying my code, okay? (Update: See the previous, bolded
paragraph where I describe how Finch DID JUST THAT).</p>

<p><a href="http://garylarizza.com/blog/2014/02/18/puppet-workflow-part-3/">In the previous post</a> I setup a file called <code>r10k_installation.pp</code>
to setup R10k. Let&rsquo;s revisit that manifest it and modify it for
<a href="https://github.com/glarizza/hiera_environment">my Hiera repo:</a></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/var/tmp/r10k_installation.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="nc">class</span> <span class="p">{</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">r10k</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">:</span>
</span><span class='line'>  <span class="nt">version</span>           <span class="p">=&gt;</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="m">1.1.4</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;,</span>
</span><span class='line'>  <span class="ss">sources</span>           <span class="err">=&gt;</span> <span class="p">{</span><span class="err">&lt;/</span><span class="ss">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">pre</span><span class="err">&gt;&lt;</span><span class="ss">code</span><span class="err">&gt;</span><span class="s1">&#39;puppet&#39;</span> <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;remote&#39;</span>  <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="s1">&#39;https://github.com/glarizza/puppet_repository.git&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;basedir&#39;</span> <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="s2">&quot;</span><span class="si">${::settings::confdir}</span><span class="s2">/environments&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;prefix&#39;</span>  <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="ss">false</span><span class="p">,</span>
</span><span class='line'><span class="p">},</span>
</span><span class='line'><span class="s1">&#39;hiera&#39;</span> <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;remote&#39;</span>  <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="s1">&#39;https://github.com/glarizza/hiera_environment.git&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;basedir&#39;</span> <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="s2">&quot;</span><span class="si">${::settings::confdir}</span><span class="s2">/hiera&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s1">&#39;prefix&#39;</span>  <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="ss">true</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="err">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="ss">pre</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">p</span><span class="err">&gt;</span>  <span class="p">}</span><span class="err">,</span>
</span><span class='line'>  <span class="ss">purgedirs</span>         <span class="err">=&gt;</span> <span class="p">[</span><span class="err">&amp;</span><span class="ss">ldquo</span><span class="err">;$</span><span class="p">{</span><span class="err">::</span><span class="ss">settings</span><span class="err">::</span><span class="ss">confdir</span><span class="p">}</span><span class="err">/</span><span class="ss">environments</span><span class="err">&amp;</span><span class="ss">rdquo</span><span class="err">;</span><span class="p">]</span><span class="err">,</span>
</span><span class='line'>  <span class="ss">manage_modulepath</span> <span class="err">=&gt;</span> <span class="ss">true</span><span class="err">,</span>
</span><span class='line'>  <span class="ss">modulepath</span>        <span class="err">=&gt;</span> <span class="err">&amp;</span><span class="ss">ldquo</span><span class="err">;$</span><span class="p">{</span><span class="err">::</span><span class="ss">settings</span><span class="err">::</span><span class="ss">confdir</span><span class="p">}</span><span class="sr">/environments/</span><span class="err">\</span><span class="nv">$environment</span><span class="sr">/modules:/</span><span class="ss">opt</span><span class="sr">/puppet/</span><span class="ss">share</span><span class="sr">/puppet/</span><span class="ss">modules</span><span class="err">&amp;</span><span class="ss">rdquo</span><span class="err">;,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>NOTE: For the duration of this post, I&rsquo;ll be referring to Puppet Enterprise
specific paths (like <code>/etc/puppetlabs/puppet</code> for $confdir). Please do the
translation for open source Puppet, as R10k will work just fine with either
the open source edition or the Enterprise edition of Puppet</strong></p>

<p>You&rsquo;ll note that I added a source called &lsquo;hiera&rsquo; that tracks my Hiera
repository, creates sub-folders in <code>/etc/puppetlabs/puppet/hiera</code>, and enables
prefixing to deal with the bug I mentioned in the previous paragraph. Now,
let&rsquo;s run Puppet and do an R10k synchronization:</p>

<p>```
[root@master1 garysawesomeenvironment]# puppet apply /var/tmp/r10k_installation.pp
Notice: Compiled catalog for master1 in environment production in 1.78 seconds
Notice: /Stage[main]/R10k::Config/File[r10k.yaml]/content: content changed &lsquo;{md5}c686917fcb572861429c83f1b67cfee5&rsquo; to &lsquo;{md5}69d38a14b5de0d9869ebd37922e7dec4&rsquo;
Notice: Finished catalog run in 1.24 seconds</p>

<p>[root@master1 puppet]# r10k deploy environment -pv
[R10K::Task::Deployment::DeployEnvironments &ndash; INFO] Loading environments from all sources
[R10K::Task::Environment::Deploy &ndash; NOTICE] Deploying environment hiera_testing
[R10K::Task::Puppetfile::Sync &ndash; INFO] Loading modules from Puppetfile into queue
[R10K::Task::Environment::Deploy &ndash; NOTICE] Deploying environment hiera_production
[R10K::Task::Puppetfile::Sync &ndash; INFO] Loading modules from Puppetfile into queue
[R10K::Task::Environment::Deploy &ndash; NOTICE] Deploying environment hiera_master
[R10K::Task::Puppetfile::Sync &ndash; INFO] Loading modules from Puppetfile into queue
[R10K::Task::Environment::Deploy &ndash; NOTICE] Deploying environment production
[R10K::Task::Puppetfile::Sync &ndash; INFO] Loading modules from Puppetfile into queue
[R10K::Task::Module::Sync &ndash; INFO] Deploying notifyme into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying redis into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying property_list_key into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying wordpress into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying make into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying concat into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vsftpd into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying portage into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying inifile into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying git into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vcsrepo into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying firewall into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying ruby into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying mysql into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying pe_gem into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying apache into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying stdlib into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying notifyme into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying redis into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying property_list_key into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying wordpress into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying make into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying concat into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vsftpd into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying portage into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying inifile into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying git into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vcsrepo into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying firewall into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying ruby into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying mysql into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying pe_gem into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying apache into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying stdlib into /etc/puppetlabs/puppet/environments/production/modules
[R10K::Task::Environment::Deploy &ndash; NOTICE] Deploying environment master
[R10K::Task::Puppetfile::Sync &ndash; INFO] Loading modules from Puppetfile into queue
[R10K::Task::Module::Sync &ndash; INFO] Deploying redis into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying property_list_key into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying wordpress into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vsftpd into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying portage into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying inifile into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying git into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vcsrepo into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying firewall into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying mysql into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying pe_gem into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying apache into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying stdlib into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying redis into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying property_list_key into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying wordpress into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vsftpd into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying portage into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying inifile into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying git into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vcsrepo into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying firewall into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying mysql into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying pe_gem into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying apache into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying stdlib into /etc/puppetlabs/puppet/environments/master/modules
[R10K::Task::Environment::Deploy &ndash; NOTICE] Deploying environment garysawesomeenvironment
[R10K::Task::Puppetfile::Sync &ndash; INFO] Loading modules from Puppetfile into queue
[R10K::Task::Module::Sync &ndash; INFO] Deploying notifyme into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying redis into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying property_list_key into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying wordpress into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying make into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying concat into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vsftpd into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying portage into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying inifile into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying git into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vcsrepo into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying firewall into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying ruby into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying mysql into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying pe_gem into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying apache into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying stdlib into /etc/puppetlabs/puppet/environments/garysawesomeenvironment/modules
[R10K::Task::Environment::Deploy &ndash; NOTICE] Deploying environment development
[R10K::Task::Puppetfile::Sync &ndash; INFO] Loading modules from Puppetfile into queue
[R10K::Task::Module::Sync &ndash; INFO] Deploying r10k into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying property_list_key into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying wordpress into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying inifile into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying vsftpd into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying firewall into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying mysql into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying pe_gem into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying apache into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Module::Sync &ndash; INFO] Deploying stdlib into /etc/puppetlabs/puppet/environments/development/modules
[R10K::Task::Deployment::PurgeEnvironments &ndash; INFO] Purging stale environments from /etc/puppetlabs/puppet/environments
[R10K::Task::Deployment::PurgeEnvironments &ndash; INFO] Purging stale environments from /etc/puppetlabs/puppet/hiera</p>

<p>[root@master1 puppet]# ls /etc/puppetlabs/puppet/hiera
hiera_master  hiera_production  hiera_testing</p>

<p>[root@master1 puppet]# ls /etc/puppetlabs/puppet/environments/
development  garysawesomeenvironment  master  production
```</p>

<p>Great, so it configured R10k to clone the Hiera repository to
<code>/etc/puppetlabs/puppet/hiera</code> like we wanted it to, and you can see that with
prefixing enabled we have folders named &ldquo;hiera_${branchname}&rdquo;.</p>

<p>In Puppet, the magical connection that maps these subfolders to Puppet
environments is in <code>puppet.conf</code>, but for Hiera that&rsquo;s the <code>hiera.yaml</code> file.
I&rsquo;ve included that file in my <a href="https://github.com/glarizza/hiera_environment">Hiera repo</a>, so let&rsquo;s look at the
copy at <code>/etc/puppetlabs/puppet/hiera/hiera_production/hiera.yaml</code>:</p>

<h2><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>/etc/puppetlabs/puppet/hiera/hiera_production/hiera.yaml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;:backends</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="nl">&amp;ndash</span><span class="l-Scalar-Plain">; yaml</span>
</span><span class='line'><span class="l-Scalar-Plain">:hierarchy</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="nl">&amp;ndash</span><span class="l-Scalar-Plain">; &amp;ldquo;%{clientcert}&amp;rdquo;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; &amp;ldquo;%{environment}&amp;rdquo;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; global&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;:yaml</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:datadir</span><span class="p-Indicator">:</span> <span class="nl">&amp;lsquo</span><span class="l-Scalar-Plain">;/etc/puppetlabs/puppet/hiera/hiera_%{environment}/hieradata&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The magical line is in the <code>:datadir:</code> setting of the <code>:yaml:</code> section; it
uses <code>%{environment}</code> to evaluate the environment variable set by Puppet and
set the path accordingly.</p>

<p>As of right now R10k is configured to clone Hiera data from a known repository
to <code>/etc/puppetlabs/puppet/hiera</code>, to create sub-folders based on branches to
that repository, and to tie data provided to each Puppet environment to the
respective subfolder of <code>/etc/puppetlabs/puppet/hiera</code> that matches the pattern
of <strong>&ldquo;hiera_(environment_name)&rdquo;</strong>.</p>

<h3>The problem with <code>hiera.yaml</code></h3>

<p>You&rsquo;ll notice that each subfolder to <code>/etc/puppetlabs/puppet/hiera</code> contains
its own copy of <code>hiera.yaml</code>.  You&rsquo;re probably drawing the conclusion that
each Puppet environment can read from its own <code>hiera.yaml</code> for Hiera configuration.</p>

<p>And you would be wrong.</p>

<p><a href="http://projects.puppetlabs.com/issues/11784">For information on this bug, check out this link.</a> You&rsquo;ll see
that we provide a &lsquo;hiera_config&rsquo; configuration option in Puppet that allows
you to specify the path to <code>hiera.yaml</code>, but Puppet loads that config as
singleton, which means that it&rsquo;s read initially when the Puppet master process
starts up and it&rsquo;s NOT environment-aware. The workaround is to use one
<code>hiera.yaml</code> for all environments on a Puppet master but to dynamically change
the <code>:datadir:</code> path according to the current environment (in the same way that
dynamic Puppet environments abuse &lsquo;$environment&rsquo; in <code>puppet.conf</code>). You gain
the ability to have per-environment changes to Hiera data but lose the ability
to do things like using different hierarchies for different environments. As
of right now, if you want a different hierarchy then you&rsquo;re going to need to
use a different master (or do some hacky things that I don&rsquo;t even want to
BEGIN to approach in this article).</p>

<p>In summary &ndash; there will be a hiera.yaml per environment, but they will not
be consulted on a per-environment basis.</p>

<h3>Workflow for per-environment Hiera data</h3>

<p><a href="http://garylarizza.com/blog/2014/02/18/puppet-workflow-part-3/">Looking back on the previous post,</a> you&rsquo;ll see that the workflow
for updating Hiera data is identical to the workflow for updating code to your
Puppet environments.  Namely, to create a new environment for testing Hiera
data, you will:</p>

<ul>
<li>Push a branch to the Hiera repository and name it accordingly (remembering
that the name you choose will be a new environment).</li>
<li>Run R10k to synchronize the data down to the Puppet master</li>
<li>Add your node to that environment and test out the changes</li>
</ul>


<p>For existing environments, simply push changes to that environment&rsquo;s branch
and repeat the last two steps.</p>

<p><strong>NOTE: Puppet environments and Hiera environments are linked &ndash; both tools use
the same &lsquo;environment&rsquo; concept and so environment names MUST match for the data
to be shared (i.e. if you create an environment in Puppet called &lsquo;yellow&rsquo;, you
will need a Hiera environment called &lsquo;yellow&rsquo; for that data).</strong></p>

<p>This tight-coupling can cause issues, and will ultimately mean that certain
branches are longer-lived than others. It&rsquo;s also the reason why I don&rsquo;t use
defaults in my <code>hiera()</code> lookups inside Puppet manifests &ndash; I WANT the early
failure of a compilation error to alert me of something that needs fixed.</p>

<p>You will need to determine whether this tight-coupling is worth it for your
organization to tie your Hiera repository directly into R10k or to handle it
out-of-band.</p>

<h2>R10k and monolithic module repositories</h2>

<p>One of the first requirements you encounter when working with R10k is that your
component modules need to be stored in their own repositories.  That convention
is still relatively new &ndash; it wasn&rsquo;t so long ago that we were recommending that
modules be locked away in a giant repo. Why?</p>

<ul>
<li>It&rsquo;s easier to clone</li>
<li>The state of module reusability was poor</li>
</ul>


<p>The main reason was that it was easier to put everything in one repo and clone
it out on all your Puppet master servers. This becomes insidious as your module
count rises and people start doing lovely things like committing large binaries
into modules, pulling in old versions of modules they find out on the web, and
the like. It also becomes an issue when you start needing to lock committers
out of specific directories due to sensitive data, and blah blah blah blah&hellip;</p>

<p>There are better posts out there justifying/villafying the choice of one or
multiple repositories, this section&rsquo;s meant only to show you how to incorporate
a single repository containing multiple modules into your R10k workflow.</p>

<p><a href="http://garylarizza.com/blog/2014/02/18/puppet-workflow-part-3/">From the last post</a> you&rsquo;ll remember that the <code>Puppetfile</code> allows
you to tie a repository, and some version reference, to a directory using
R10k. Incorporating a monolithic repository starts with an entry in the
<code>Puppetfile</code> like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Puppetfile </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mod</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">my_big_module_repo</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="ss">git</span><span class="p">:</span><span class="sr">//</span><span class="n">github</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">glarizza</span><span class="o">/</span><span class="n">my_big_module_repo</span><span class="o">.</span><span class="n">git</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="ss">:ref</span> <span class="o">=&gt;</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">0</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>NOTE: That git repository doesn&rsquo;t exist. I don&rsquo;t HAVE a monolithic repo to
demonstrate, so I&rsquo;ve chosen an arbitrary URI. Also note that you can use ANY
name you like after the <code>mod</code> syntax to name the resultant folder &ndash; it doesn&rsquo;t
HAVE to mirror the URI of the repository.</strong></p>

<p>Adding this entry to the <code>Puppetfile</code> would checkout that repository to
wherever all the other modules are checked out with a folder name of
&lsquo;my_big_module_repo&rsquo;. Within that folder would most-likely (again, depending
on how you&rsquo;ve laid out your repository) contain subfolders containing Puppet
modules. This entry gets the modules onto your Puppet master, but it doesn&rsquo;t
make Puppet aware of their location. For that, we&rsquo;re going to need to add an
entry to the &lsquo;modulepath&rsquo; configuration item in <code>puppet.conf</code></p>

<p>Inside <code>/etc/puppetlabs/puppet/puppet.conf</code> you should see a configuration item
called &lsquo;modulepath&rsquo; that currently has a value of:</p>

<p><code>
modulepath = /etc/puppetlabs/puppet/environments/$environment/modules:/opt/puppet/share/puppet/modules
</code></p>

<p>The modulepath itself works like a PATH environment variable in Linux &ndash; it&rsquo;s
a priority-based lookup mechanism that Puppet uses to find modules. Currently,
Puppet will first look in <code>/etc/puppetlabs/puppet/environments/$environment/modules</code>
for a module. If a the module that Puppet was looking for was found, Puppet
will use it and not inspect the second path. If the module was not found at the
FIRST path, it will inspect the second path. Failing to find the module at the
second path results in a compilation error for Puppet. Using this to our
advantage, we can add the path to the monolithic repository checked-out by the
<code>Puppetfile</code> AFTER the path to where all the individual modules are checked-out.
This should look something like this:</p>

<p><code>
modulepath = /etc/puppetlabs/puppet/environments/$environment/modules:/etc/puppetlabs/puppet/environments/$environment/modules/my_big_module_repo:/opt/puppet/share/puppet/modules
</code></p>

<p><strong>Note: This assumes all modules are in the root of the monolithic repo. If
they&rsquo;re in a subdirectory, you must adjust accordingly</strong></p>

<p>That&rsquo;s a huge line (and if you&rsquo;re afraid of anything over 80 column-widths then
I&rsquo;m sorry&hellip;and you should probably buy a new monitor&hellip;and the 80s are over),
but the gist is that we&rsquo;re first going to look for modules checked out by R10k,
THEN we&rsquo;re going to look for modules in our monolithic repo, then we&rsquo;re going
to look in Puppet Enterprise&rsquo;s vendored module directory, and finally, like I
said above, we&rsquo;ll fail if we can&rsquo;t find our module. This will allow you to KEEP
using your monolithic repository and also slowly cut modules inside that
monolithic repo over to their own repositories (since when they gain their own
repository, they will be located in a path that COMES before the monolithic
repo, and thus will be given priority).</p>

<h2>Using MCollective to perform R10k synchronizations</h2>

<p>This section is going to be much less specific than the rest because the piece
that does the ACTION is part of <a href="http://forge.puppetlabs.com/zack/r10k">a module for R10k</a>. As of the time
of this writing, this agent is in one state, but that could EASILY change. I
will defer to <a href="http://forge.puppetlabs.com/zack/r10k">the module in question</a> (and specifically its
README file) should you need specifics (or if my module is dated). What I CAN
tell you, however, is that <a href="http://forge.puppetlabs.com/zack/r10k">the R10k module</a> does come with a class
that will setup and configure both an MCollective agent for R10k and also a
helper application that should make doing R10k synchroniations on multiple
Puppet masters much easier than doing them by hand.  First, you&rsquo;ll need to
INSTALL the MCollective agent/application, and you can do that by pulling
down <a href="http://forge.puppetlabs.com/zack/r10k">the module</a> and its dependencies, and classifying all Puppet
masters with R10k enabled by doing the following:</p>

<p><code>puppet
include r10k::mcollective
</code></p>

<p>Terribly difficult, huh? With that, both the MCollective agent and application
should be available to MCollective on that node. The way to trigger a
syncronization is to login to an account on a machine that has MCollective
client access (in Puppet Enterprise, this would be any Puppet master that&rsquo;s
allowed the role, and then, specifically, the <code>peadmin</code> user&hellip;so doing a
<code>su - peadmin</code> should afford you access to that user), and perform the following
command:</p>

<p><code>
mco r10k deploy
</code></p>

<p>This is where the README differs a bit, and the reason for that is because Finch
changed the syntax that R10k uses to synchronize and deploy modules to a Master.
The CURRENTLY accepted command (because, knowing Finch, that shit might change)
is <code>r10k deploy environment -p</code>, and the action to the MCollective agent that
EXECUTES that command is the &lsquo;deploy&rsquo; action.  The README refers to the
&lsquo;synchronize&rsquo; action, which executes the <code>r10k synchronize</code> command. This command
MAY STILL WORK, but it&rsquo;s deprecated, and so it&rsquo;s NOT recommended to be used.</p>

<p>Like I said before, this agent is subject to change (mainly do to R10k command
deprecation and maturation), so definitely refer to the README and the code
itself for more information (or
<a href="http://github.com/acidprime/puppet-r10k">file issues and pull requests on the module repo directly</a>).</p>

<h2>Tying R10k to CI workflows</h2>

<p>I spent a year doing some presales work for the Puppet Labs SE team, so I can
hand-wave and tapdance like a motherfucker. I&rsquo;m going to need those skills for
this next section, because if you thought the previous section glossed over the
concepts pretty quickly and without much detail, then this section is going to
feel downright vaporous (is that a word? Fuck it; I&rsquo;m handwaving &ndash; it&rsquo;s
a word). I really debated whether to include the following sections in this
post because I don&rsquo;t really give you much specific information; it&rsquo;s all very
generic and full of &ldquo;ideas&rdquo; (though I do list some testing libraries below that
are helpful if you&rsquo;ve never heard of them). Feel free to abandon ship and skip
to the FINAL section right now if you don&rsquo;t want to hear about &lsquo;ideas&rsquo;.</p>

<p>For the record, I&rsquo;m going to just pick and use the term &ldquo;CI&rdquo; when I&rsquo;m referring
to the process of automating the testing and deployment of, in this case,
Puppet code.  There have definitely been posts arging about which definition is
more appropriate, but, frankly, I&rsquo;m just going to pick a term and go with it,</p>

<p>The issue at hand is that when you talk &ldquo;CI&rdquo; or &ldquo;CD&rdquo; or &ldquo;Continuous (fill_in_the_blank)&rdquo;, you&rsquo;re
talking about a workflow that&rsquo;s tailored to each organization (and sometimes
each DEPARTMENT of an organization). Sometimes places can agree on a specific
tool to assist them with this process (be it Jenkins, Hudson, Bamboo, or
whatever), but beyond that it&rsquo;s anyone&rsquo;s game.</p>

<p>Since we&rsquo;re talking PUPPET code, though, you&rsquo;re restricted to certain tasks
that will show up in any workflow&hellip;and THAT is what I want to talk about here.</p>

<p>To implement some sort of CI workflow means laying down a &lsquo;pipeline&rsquo; that takes a
change of your Puppet code (a new module, a change to an existing module, some
Hiera data updates, whatever) from the developer&rsquo;s/operations engineer&rsquo;s workstation
right into production.  The way we do this with R10k currently is to:</p>

<ul>
<li>Make a change to an individual module</li>
<li>Commit/push those changes to the module&rsquo;s remote repository</li>
<li>Create a test branch of the puppet_repository</li>
<li>Modify the <code>Puppetfile</code> and tie your module&rsquo;s changes to this environment</li>
<li>Commit/push those changes to the puppet_repository</li>
<li>Perform an R10k synchronization</li>
<li>Test</li>
<li>Repeat steps 1-7 as necessary until shit works how you like it</li>
<li>Merge the changes in the test branch of the puppet_repository with the production branch</li>
<li>Perform an R10k synchronization</li>
<li>Watch code changes become active in your production environment</li>
</ul>


<p>Of those steps, there&rsquo;s arguably about 3 unique steps that could be automated:</p>

<ul>
<li>R10k synchronizations</li>
<li>&lsquo;Testing&rsquo; (whatever that means)</li>
<li>Merging the changes in the test branch of the puppet_repository with the production branch</li>
</ul>


<p><strong>NOTE: As we get progressively-more-handwavey (also probably not a word, but fuck it &ndash; let&rsquo;s
be thought leaders and CREATE IT), each one of these steps is going to be more
and more&hellip;generic. For example &ndash; to say &ldquo;test your code&rdquo; is a great idea, but,
seriously, defining how to do that could (and should) be multiple blog posts.</strong></p>

<h3>Laying down the pipeline</h3>

<p>If I were building an automated workflow, the first thing I would do is
setup something like Jenkins and configure it to watch the puppet_repository
that contains the <code>Puppetfile</code> mapping all my modules and versions to Puppet
environments. On changes to this repository, we want Jenkins to perform an R10k
synchronization, run tests, and then, possibly, merge those changes into
production (depending on the quality of your tests and how &lsquo;webscale&rsquo; you think
you are on that day).</p>

<h3>R10k synchronizations</h3>

<p>If you&rsquo;re paying attention, we solved this problem in the previous section with
the R10k MCollective agent. Jenkins should be running on a machine that has the
ability to execute MCollective client commands (such as triggering
<code>mco r10k deploy</code> when necessary).  You&rsquo;ll want to tailor your calls from
Jenkins to only deploy environments it&rsquo;s currently testing (remember in the
puppet_repository that topic branches map to Puppet environments, so this
is a per-branch action) as opposed to deploying ALL environments every time.</p>

<p>Also, if you&rsquo;re buiding a pipeline, you might not want to do R10k
synchronizations on ALL of your Puppet Masters at this point. Why not? Well,
if your testing framework is good enough and has sufficient coverage that
you&rsquo;re COMPLETELY trusting it to determine whether code is acceptable or not,
then this is just the FIRST step &ndash; making the code available to be tested. It&rsquo;s
not passed tests yet, so pushing it out to all of your Puppet masters is a bit
wasteful. You&rsquo;ll probably want to only synchronize with a single master that&rsquo;s
been identified for testing (and a master that has the ability to spin up
fresh nodes, enforce the Puppet code on them, submit those nodes to a battery
of tests, and then tear them down when everything has been completed).</p>

<p>If you&rsquo;re like the VAST majority of Puppet users out there that DON&rsquo;T have a
completely automated testing framework that has such complete coverage that you
trust it to determine whether code changes are acceptable or not, then you&rsquo;re
probably &lsquo;testing&rsquo; changes manually. For these people, you&rsquo;ll probably want to
synchronize code to whichever Puppet master(s) are suitable.</p>

<p>The cool thing about these scenarios is that MCollective is flexible enough
to handle this. MCollective has the ability to filter your nodes based on
things like available MCollective agents, Facter facts, Puppet classes, and
even things like the MD5 hashes of arbitrary files on the filesystem&hellip;so
however you want to restrict synchronization, you can do it with MCollective.</p>

<p>After all of that, the answer here is &ldquo;Use MCollective to do R10k syncs/deploys.&rdquo;</p>

<h3>Testing</h3>

<p>This section needs its own subset of blog posts. There are all kinds of tools
that will allow you to test all sorts of things about your Puppet code (from
basic syntax checking and linting, to integration tests that check for the
presence of resources in the catalog, to acceptance-level tests that check
the end-state of the system to make sure Puppet left it in a state that&rsquo;s
acceptable).  The most common tools for these types of tests are:</p>

<ul>
<li><a href="http://puppet-lint.com">Puppet-lint</a></li>
<li><a href="http://rspec-puppet.com">Rspec-puppet</a></li>
<li><a href="http://github.com/puppetlabs/beaker">Beaker</a></li>
<li><a href="https://github.com/serverspec/serverspec">Serverspec</a></li>
<li>And more&hellip;</li>
</ul>


<p>Unfortunately, the point of this section is NOT to walk you through setting up
one or more of those tools (I&rsquo;d love to write those posts soon&hellip;), but rather
to make you aware of their presence and identify where they fit in our Pipeline.</p>

<p>Once you&rsquo;ve synchronized/deployed code changes to a specific machine (or
subset of machines), the next step is to trigger tests.</p>

<p>Backing up the train a bit, certain kinds of &lsquo;tests&rsquo; should be done WELL in
advance of this step. For example, if code changes don&rsquo;t even pass basic syntax
checking and linting, they shouldn&rsquo;t even MAKE it into your repository. Things
like pre-commit hooks will allow you to trigger syntactical checks and linting
before a commit is allowed. We&rsquo;re assuming you&rsquo;ve already set those up (and
if you&rsquo;ve NOT, then you should probably do that RIGHT NOW).</p>

<p>Rather, in this section, we&rsquo;re talking about doing some basic integration
smoke testing (i.e. running the rspec-puppet tests on all the modules to ensure
that what we EXPECT in the catalog is actually IN the catalog), moving into
acceptance level testing (i.e. spinning up pristine/clean nodes, actually
applying the Puppet code to the nodes, and then running things like Beaker
or Serverspec on the nodes to check the end-state of things like services, open
ports, configuration files, and whatever to ensure that Puppet ACTUALLY left
the system in a workable state), and then returning a &ldquo;PASS&rdquo; or
&ldquo;FAIL&rdquo; response to Jenkins (or whatever is controlling your pipeline).</p>

<p>These tests can be as thorough or as loose as is acceptable to you (obviously,
the goal is to automate ALL of your tests so you don&rsquo;t have to manually check
ANY changes, but that&rsquo;s the nerd-nirvana state where we&rsquo;re all browsing the web
all day), but they should catch the most NOTORIOUS and OBVIOUS things FIRST.
Follow the same rules you did when you got started with Puppet &ndash; catch the
things that are easiest to catch and start building up your cache of &ldquo;Total
Time Saved.&rdquo;</p>

<p>Jenkins needs to be able to trigger these tests from wherever it&rsquo;s running,
so your Jenkins box needs the ability to, say, spin up nodes in ESX, or
locally with something like Vagrant, or even cloud nodes in EC2 or GCE, then
TRIGGER the tests, and finally get a &ldquo;PASS&rdquo; or &ldquo;FAIL&rdquo; response back. The
HARDEST part here, by far, is that you have to define what level of testing
you&rsquo;re going to implement, how you&rsquo;re going to implement it, and devise
the actual process to perform the testing. Like I said before, there are other
blog posts that talk about this (and I hope to tackle this topic in the very
near future), so I&rsquo;ll leave it to them for the moment.</p>

<h3>To merge or not to merge</h3>

<p>The final step for any test code is to determine whether it should be merged
into production or not. Like I said before, if your tests are sufficient and
are adequate at determining whether a change is &lsquo;good&rsquo; or not, then you can
look at automating the process of merging those changes into production and
killing off the test branch (or, NOT merging those changes, and leaving the
branch open for more changes).</p>

<p>Automatically merging is scary for obvious reasons, but it&rsquo;s also a good &lsquo;test&rsquo;
for your test coverage. Committing to a &lsquo;merge upon success&rsquo; workflow takes
trust, and there&rsquo;s absolutely no shame in leaving this step to a human,
to a change review board, or to some out-of-band process.</p>

<h2>Use your illusion</h2>

<p>These are the most common questions I get asked after the initial shock of R10k,
and its workflow, wears off. Understand that I do these posts NOT from a &ldquo;Here&rsquo;s
what you should absolutely be doing!&rdquo; standpoint, but more from a &ldquo;Here&rsquo;s what&rsquo;s
going on out there.&rdquo; vantage. Every time I&rsquo;m called on-site with a customer, I
evaluate:</p>

<ul>
<li>The size and experience level of the team involved</li>
<li>The processes that the team must adhere to</li>
<li>The Puppet experience level of the team</li>
<li>The goals of the team</li>
</ul>


<p>Frankly, after all those observations, sometimes I ABSOLUTELY come to the
conclusion that something like R10k is entirely-too-much process for
not-enough benefit. For those who are a fit, though, we go down the checklists
and tailor the workflow to the environment.</p>

<h2>What more IS there on R10k?</h2>

<p>I do have at least a couple of more posts in me on some specific issues I&rsquo;ve
hit when consulting with companies using R10k, such as:</p>

<ul>
<li>How best to use Hiera and R10k with Puppet &lsquo;environments&rsquo; and internal, long-term &lsquo;environments&rsquo;</li>
<li>Better ideas on &lsquo;what to branch and why&rsquo; with regard to component modules and the puppet_repository</li>
<li>To inherit or not to inherit with Roles</li>
<li>How to name things (note that I work for Puppet Labs, so I&rsquo;m most likely very WRONG with this section)</li>
<li>Other random things I&rsquo;ve noticed&hellip;</li>
</ul>


<p>Also, I apologize if it&rsquo;s been awhile since I&rsquo;ve replied to a couple of
comments. I&rsquo;m booked out 3 months in advance and things are pretty wild at
the moment, but I&rsquo;m REALLY thankful of everyone who cares enough to drop a
note, and I hope I&rsquo;m providing some good info you can actually use! Cheers!</p>
]]></content>
  </entry>
  
</feed>
