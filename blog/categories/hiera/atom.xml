<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hiera | Shit Gary Says]]></title>
  <link href="http://garylarizza.com/blog/categories/hiera/atom.xml" rel="self"/>
  <link href="http://garylarizza.com/"/>
  <updated>2017-02-07T12:10:45-08:00</updated>
  <id>http://garylarizza.com/</id>
  <author>
    <name><![CDATA[Gary larizza]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Data Escalation Path: Does it go in the Profile or Hiera?]]></title>
    <link href="http://garylarizza.com/blog/2017/02/07/data-escalation-path/"/>
    <updated>2017-02-07T11:39:13-08:00</updated>
    <id>http://garylarizza.com/blog/2017/02/07/data-escalation-path</id>
    <content type="html"><![CDATA[<p><strong>NOTE</strong>: <em>This post is lacking a lot of the humor and playful tone I normally
use when writing posts because it was originally designed for another purpose.
I&rsquo;m posting it in its entirety here because I consider the information useful
and want to get it out to people who ask me about this topic. Insert some Harry
Potter references if it gets a bit dry&hellip;</em></p>

<p>Writing reusable Puppet manifests involves a combination of static and dynamic
data, but the decision of whether to &ldquo;hardcode data&rdquo;, use a variable, set
a parameter, do a Hiera lookup, or do a combination of the above is one of the
most frequently asked questions by Puppet users. This guide will both describe the
available data lookup methods and advise on when it is best to &ldquo;escalate&rdquo;
based on the requirements at hand.</p>

<h2>What is &ldquo;Data&rdquo; and what is &ldquo;Code&rdquo;?</h2>

<p>This issue about what constitutes &ldquo;data&rdquo; is the first wrinkle in devising
a data escalation path. <a href="https://docs.puppet.com/pe/latest/r_n_p_intro.html">The Puppet docs page on Roles and Profiles</a>
does a great job of describing the difference between a component module and
a profile.</p>

<p>To quickly summarize: a component module is a general-purpose module
designed to model the configuration of a piece of technology (e.g. apache,
tomcat, ntpd), and a profile is an organization-specific Puppet module that
describes an organization&rsquo;s IMPLEMENTATION of a piece of technology. For
example, an apache profile that an organization creates might use the official
Puppet apache module to install and configure apache, but the profile might
also contain resources for an organization&rsquo;s SSL certificates or credentials that
would be layered atop of the configuration that the Puppet apache module
provides. The resource(s) modeling the SSL certificate(s) are ONLY necessary for
that organization, which is why they don&rsquo;t show up in the official Puppet
apache module.</p>

<p>By this account the offical Puppet apache module itself represents the &ldquo;code&rdquo;,
or the generic and re-usable aspect of the configuration (as most good
component modules would), but the profile contains the
organizational/site-specific data that is fed TO the component module (or
&ldquo;code&rdquo;) when that module is declared/used.  This separation &ndash; and the fact that
data can be represented within the same constructs as as code can &ndash; is
frequently a source of confusion/frustration for new Puppet users (and
especially for users with a background in object-oriented programming).</p>

<p>Data within a profile can come in different forms &ndash; a value to a parameter when
a class is declared, a variable assigned within the profile, or even a Hiera
lookup (explicitly done or through Puppet&rsquo;s automatic parameter lookkup). Since
it&rsquo;s all data, which method do you use? That&rsquo;s the question this document means
to answer.</p>

<p>A note for clarity: this document specifically covers data escalation paths
within profiles and NOT component modules. Unless explicitly noted, assume that
recommendations apply ONLY to profiles and not component modules (since
profiles represent site-specific data).</p>

<h2>Why an escalation path?</h2>

<p>Seldom are things cut-and-dry within Puppet manifests. Instead of focusing on
whether something is in the &ldquo;right&rdquo; place, it&rsquo;s better to think about the ways
that complexity can be added to solve problems. You can absolutely put
everything you would consider data inside Hiera, and that would immediately
provide you a way to handle most corner cases, but then the legibility of
your Puppet manifest suffers when you have to jump back to Hiera every time you
need to retrieve a data value (and currently that&rsquo;s a very labor-intensive
thing to do if you don&rsquo;t have direct access to the Puppet masters). Consider
every way to handle data another tool in your Puppet belt, and certain tools
are better at solving problems that others. This document, then, is a rundown
on the pros and cons of every tool.</p>

<h2>&ldquo;Hardcoding&rdquo; variables</h2>

<p>The word hardcoding is wrapped in quotes because traditionally the term evokes
negative connatations. When we use the word &ldquo;hardcoding&rdquo; we mean
directly-editing an item within a Puppet manifest without assigning a variable.
In the below example if you opened up the Puppet manifest and changed the owner from
&lsquo;root&rsquo; to &lsquo;puppet&rsquo;, then that would be considered hardcoding the value.</p>

<p><code>puppet
file { '/etc/puppetlabs/puppet/puppet.conf':
  ensure =&gt; file,
  owner  =&gt; 'root',
  group  =&gt; 'root',
  mode   =&gt; '0644',
  source =&gt; 'puppet:///modules/mymodule/puppet.conf',
}
</code></p>

<p>Hardcoding has a negative connotation because typically when someone would
hardcode a value in a shell script it represented a workaround where a data
item is injected into the code (and mixing data and code means that your code
is no longer as generic/extensible as it once was).  That concern is still
valid with Puppet: if you open up the official Puppet apache module and
change/add a site-specific value within that component module, then you ARE
mixing data with code. If, instead, you edit the apache profile for your
organization and change a value there, then you&rsquo;re changing site-specific data
to something that is already considered site-specific. The difference is that
the official Puppet apache module is desiged to be extensible and used where
necessary, but the profile is only meant to be used by your
organization/site/group.</p>

<p>Hardcoding a value is the easiest &ldquo;tool&rdquo; to understand: something was
previously set to one value, and now it&rsquo;s set to another value. It&rsquo;s also the
easiest change to implement: simply change the value and move along. If done
correctly, someone could change the value without needing to understand the
Puppet DSL (Domain Specific Language, i.e. the rules governing Puppet code in
a Puppet manifest). Finally, because it&rsquo;s simply text, a hardcoded value cannot
be overridden and the value is the same for all nodes.</p>

<h3>Pros</h3>

<ul>
<li>The easiest &lsquo;tool&rsquo; to understand: something was changed from one value to
another</li>
<li>The easiest change to implement</li>
</ul>


<h3>Cons</h3>

<ul>
<li>If you hardcode the <em>same</em> value in multiple places, then changing that value
requires multiple individual changes.</li>
</ul>


<h3>Recommendations</h3>

<ul>
<li>Hardcode values ONLY when their values apply to EVERY NODE being
managed by Puppet</li>
<li>Hardcode values within a manifest that only occur once &ndash; if it occurs more
than once within a manifest use a variable</li>
</ul>


<h2>Assigning a variable</h2>

<p>The next logical progression after hardcoding a value is to create and assign
a variable within a Puppet manifest. Assigning a variable is useful when a value
is going to be used in more than one place within a manifest. Because
variables within the Puppet DSL cannot be reassigned, and because variables
within a manifest cannot be assigned/changed by Hiera, variables are considered
private to the implementation and thus can only be changed by users with access
to change Puppet manifests (versus having Puppet Enterprise Console access or
access to Hiera data).  More simply: variables assist writers of Puppet code
versus users of Puppet code.</p>

<p>```puppet
$confdir = &lsquo;/etc/puppetlabs/puppet&rsquo;</p>

<p>file { &ldquo;${confdir}/puppet.conf&rdquo;:
  ensure => file,
  owner  => &lsquo;root&rsquo;,
  group  => &lsquo;root&rsquo;,
  mode   => &lsquo;0644&rsquo;,
  source => &lsquo;puppet:///modules/mymodule/puppet.conf&rsquo;,
}</p>

<p>file { &ldquo;${confdir}/puppetdb.conf&rdquo;:
  ensure => file,
  owner  => &lsquo;root&rsquo;,
  group  => &lsquo;root&rsquo;,
  mode   => &lsquo;0644&rsquo;,
  source => &lsquo;puppet:///modules/mymodule/puppetdb.conf&rsquo;,
}
```</p>

<h3>Pros</h3>

<ul>
<li>Assigning a variable provides a single point within a manifest where data can
be assigned/changed. This means if the value of the variable needs to be changed,
it can be done in ONE place within the manifest (i.e. where the variable has
been assigned), versus hardcoding which requires you to find and replace for
all instances within a manifest</li>
<li>Assigning a variable within the DSL is visible to anyone reviewing the Puppet
manifest, which means that you don&rsquo;t need to flip back and forth between
Hiera and Puppet to look up data values</li>
</ul>


<h3>Cons</h3>

<ul>
<li>The value applies to EVERYONE &ndash; it must be changed if a different value is
desired, and that change applies to everyone</li>
<li>No ability to override a value</li>
</ul>


<h3>Recommendations</h3>

<ul>
<li>Assign a variable when a value shows up more than once within a manifest and
when that value applies to EVERY node</li>
</ul>


<h2>CONDITIONALLY assigning a variable</h2>

<p>The previous section on assigning a variable recommends that variables are only
used when a value applies to EVERY node, but there is a way to work around
that: conditional statements. Conditional statements in the Puppet DSL (such as
&ldquo;if&rdquo;, &ldquo;unless&rdquo;, &ldquo;case&rdquo;, and the selector operator) allow you to assign
a variable once, but assign it differently based on some condition. Using the
previous example of Puppet&rsquo;s configuration directory, let&rsquo;s see how that would
be assigned differently based on the system&rsquo;s kernel fact:</p>

<p>```puppet</p>

<h1>Using the &ldquo;selector&rdquo; conditional statement to assign the $confdir variable</h1>

<h1>based on the kernel fact.  <a href="https://docs.puppet.com/puppet/latest/lang_conditional.html#selectors">https://docs.puppet.com/puppet/latest/lang_conditional.html#selectors</a></h1>

<p>$confdir = $facts[&lsquo;kernel&rsquo;] ?
  &lsquo;linux&rsquo;   => &lsquo;/etc/puppetlabs/puppet&rsquo;,
  &lsquo;windows&rsquo; => &lsquo;C:\ProgramData\PuppetLabs\puppet\etc&rsquo;,
  default   => fail(&ldquo;${facts[&lsquo;kernel&rsquo;]} is not supported&rdquo;),
}</p>

<p>file { &ldquo;${confdir}/puppet.conf&rdquo;:
  ensure => file,
  owner  => &lsquo;root&rsquo;,
  group  => &lsquo;root&rsquo;,
  mode   => &lsquo;0644&rsquo;,
  source => &lsquo;puppet:///modules/mymodule/puppet.conf&rsquo;,
}</p>

<p>file { &ldquo;${confdir}/puppetdb.conf&rdquo;:
  ensure => file,
  owner  => &lsquo;root&rsquo;,
  group  => &lsquo;root&rsquo;,
  mode   => &lsquo;0644&rsquo;,
  source => &lsquo;puppet:///modules/mymodule/puppetdb.conf&rsquo;,
}
```</p>

<p>The reason conditionally assigning a variable has its own section is because
when people think about &ldquo;data&rdquo; and &ldquo;choice&rdquo; with Puppet, they USUALLY think
of Hiera. Hiera is an excellent tool for conditionally assigning a value based
its internal hierarchy, but what if the conditional logic you need to use
doesn&rsquo;t follow Hiera&rsquo;s configured hierarchy? Your choices are to edit Hiera&rsquo;s
hierarchy to add the logic you need (which is disruptive to both your servers
and, potentially, individual Hiera lookups), or use conditional logic within
the DSL. Since we&rsquo;re talking about an escalation path, conditionally assigning
a variable is the next logical progression when complexity arises.</p>

<h3>Pros</h3>

<ul>
<li>Values can be assigned based on whatever conditional logic is necessary</li>
<li>Values are assigned within the Puppet DSL and thus are more visible to Puppet
code reviewers (versus needing to jump into Hiera)</li>
<li>Reusability remains &ndash; the variable is assigned once and used throughout the
manifest</li>
</ul>


<h3>Cons</h3>

<ul>
<li>Variables still cannot be reassigned/overridden</li>
<li>Conditional logic can grow to become &ldquo;stringy&rdquo; and overly-complex if left
unchecked</li>
<li>Conditional logic is syntax-heavy and requires knowledge of the Puppet DSL
(i.e. not something easily done by people who don&rsquo;t know Puppet)</li>
</ul>


<h3>Recommendations</h3>

<ul>
<li>Use conditional logic to assign a variable when conditional logic is
necessary to assign the variable, the conditional logic isn&rsquo;t overly complex,
and the logic is different from the Hiera hierarchy</li>
<li>Use conditional logic when visibility of the data values within the Puppet
DSL is a priority</li>
</ul>


<h2>Hiera lookups and class parameters</h2>

<p>Puppet&rsquo;s data lookup tool <em>du jour</em> is Hiera, and Hiera is an excellent way to
model data in a hierarchical manner based on layers of business logic.
Demonstrating how Hiera works is the easy part, implementing it (and knowing
when to do Hiera calls) is another story. Before we get there though, it&rsquo;s
important to understand that Hiera lookups can be done ad-hoc <a href="https://docs.puppet.com/puppet/latest/lookup_quick.html">through the use
of the <code>hiera()</code> or <code>lookup()</code> functions</a>, or through the <a href="https://docs.puppet.com/hiera/latest/puppet.html#automatic-parameter-lookup">automatic
class parameter lookup functionality</a>. The link will give you a detailed
explanation, but, for brevity, if a class is declared and a value is not
explicitly assigned for any of the class&rsquo;s parameters, Hiera will automatically
do a lookup for the full parameter name (i.e. if the class is called &lsquo;<code>apache</code>&rsquo;
and the parameter is called &lsquo;<code>port</code>&rsquo;, then Hiera does an automatic parameter
lookup for <code>apache::port</code> should the <code>port</code> parameter not be explicitly assigned).</p>

<p>We&rsquo;ll get back to automatic parameter lookups in a second, but for now let&rsquo;s
focus on explicit lookups. Here&rsquo;s an example using lookup functions:</p>

<p><code>puppet
$apache_port    = hiera('apache_port')
$apache_docroot = lookup('apache_docroot')
</code></p>

<p>Explicit lookups using one of the above functions are easier to see/understand
when you&rsquo;re new to Puppet because <a href="https://docs.puppet.com/hiera/latest/puppet.html#automatic-parameter-lookup">the automatic parameter lookup</a>
functionality is relatively hidden to you (should you not be aware of its
existence). The downside is that you need to search through Puppet manifests to
find all instances of these explicit lookups.</p>

<h3>Explicit lookup pros:</h3>

<ul>
<li>No need for conditional logic since Hiera is configured independently, simply
do a lookup for a value and assign it to a variable</li>
<li>Usage of a lookup function is a visible indicator that the data lives outside
the DSL (in Hiera)</li>
</ul>


<h3>Explicit lookup cons:</h3>

<ul>
<li>Loss of visibility &ndash; the data is inside Hiera&rsquo;s hierarchy and determining the
value requires invoking Hiera in some manner (as opposed to simply
observing a value in the DSL)</li>
<li>If the lookup you want to perform doesn&rsquo;t conform to Hiera&rsquo;s existing
hierarchy, then Hiera&rsquo;s hierarchy will need to be changed (which is disruptive)</li>
</ul>


<h3>Explicit lookup recommendations:</h3>

<ul>
<li>We generally discourage explicit lookups within the implementation of
a profile in favor of exposing a parameter. If there&rsquo;s a case where you would
NOT want to expose a parameter and make an API guarantee but you DO want/need
Hiera, then an explicit lookup is recommended (and be sure to document the
intent for posterity)</li>
</ul>


<p>There&rsquo;s also one more very important distinction to make&hellip;</p>

<h3>Class parameters and API vs internal logic</h3>

<p>When building a profile, the implementation (i.e. anything between the open and
closing curly braces {} ) is considered to be private. This means that there
are really no guarantees around what&rsquo;s happening as long as the technology is
configured properly in the end. Class parameters are considered to be part of
the profile&rsquo;s API, and thus there&rsquo;s a guarantee that existing parameters won&rsquo;t
be removed or have their functionality changed within a major release (if you
follow semantic versioning). More specifically, exposing a parameter indicates
to your Puppet code users that this is something that can be set/changed. Think
of computer hardware and the differentiation between phillips-head screws and
Torx screws: the phillips-head screws usually mean that customer intervention
is allowed, much the same way as parameters indicate data values that can be
changed, and Torx screws usually mean that customer intervention is disallowed,
much the same way as variables within a profile cannot be reassigned or
overridden.</p>

<p>One final word on class parameters &ndash; the Puppet Enterprise Console is able to
discover class parameters and present them visually, and it does this because
Puppetserver has an API that exposes this data. This means that parameters and
classes can be queried and enumerated. Explicit Hiera lookups are not
discoverable in the same way (you will need to search through your codebase
manually).</p>

<p>Because these two lookups have two fundamentally different purposes, we&rsquo;re
treating their usages as separate.</p>

<h3>Class parameter lookup pros:</h3>

<ul>
<li>Signals to users of Puppet code that this data item is configurable</li>
<li>Allows the value to be assigned either by the Puppet Enterprise Console (or
other configured ENC) or Hiera</li>
<li>Classes and parameters are discoverable through Puppetserver API</li>
</ul>


<h3>Class parameter lookup cons:</h3>

<ul>
<li>Automatic parameter lookup is unexepected if you don&rsquo;t know it exists</li>
<li>Loss of visibility &ndash; the data is inside Hiera&rsquo;s hierarchy and determining the
value requires invoking Hiera in some manner (as opposed to simply
observing a value in the DSL)</li>
<li>Each parameter is unique, so even if multiple profiles expose a parameter of
the same name that requires the same value, there needs to be a value in
Hiera for each unique parameter</li>
</ul>


<h3>Class parameter recommendations</h3>

<ul>
<li>Expose a parameter if/when you require the logic in Hiera&rsquo;s hierarchy to determine
the value of a data item</li>
<li>Expose a parameter if/when you need to override the value using the Puppet
Enterprise Console (or other configured ENC)</li>
<li>Expose a parameter to indicate that this part of the profile is configurable
to users of Puppet code</li>
</ul>


<h2>Summary</h2>

<p>This document was designed to start with the least amount of complexity and
work its way up. In the end, it&rsquo;s all about choosing the right data mechanism
for the problem. If you&rsquo;re a more visual learner, the flowchart below will help
clarify when to use each method:</p>

<p><a href="http://garylarizza.com/images/data/data_escalation_path.png"><img class="left" src="http://garylarizza.com/images/data/data_escalation_path.png"></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Puppet Workflows 4: Using Hiera in anger]]></title>
    <link href="http://garylarizza.com/blog/2014/10/24/puppet-workflows-4-using-hiera-in-anger/"/>
    <updated>2014-10-24T06:13:49-07:00</updated>
    <id>http://garylarizza.com/blog/2014/10/24/puppet-workflows-4-using-hiera-in-anger</id>
    <content type="html"><![CDATA[<p>Hiera. That thing nobody is REALLY quite sure how to say (FYI: It&rsquo;s pronounced
&lsquo;hiera&rsquo;), the tool that everyone says you should be using, and the tool that
will make you hate YAML syntax errors with a passion. It&rsquo;s a data/code
separation dream, (potentially) a debugging nightmare, and absolutely vital in
creating a Puppet workflow that scales better than your company&rsquo;s Wifi strategy
(FYI: your company&rsquo;s Wifi password just changed. Again. Because they&rsquo;re not
using certificates). I&rsquo;ve already written a GOOD AMOUNT on why/how to use it,
but now I&rsquo;m going to give you a couple of edge cases. Call them &ldquo;best
practices&rdquo; (and I&rsquo;ll cut you), but I like to call it &ldquo;shit I learned
after using Hiera in anger.&rdquo; Here are a couple of the most popular questions
I hear, and my usual responses&hellip;</p>

<h2>&ldquo;How should I setup my hierarchy?&rdquo;</h2>

<p>This is such a subjective question because it&rsquo;s specific to your organization
(because it&rsquo;s your data). I usually ask back &ldquo;What are the things about your
nodes that are different, and when are they different?&rdquo; Usually I hear something
back like &ldquo;Well, nodes in this datacenter have different DNS settings&rdquo; or
&ldquo;Application servers in production use one version of java, and those in dev
use a different version&rdquo; or &ldquo;All machines in the dev environment in this datacenter
need to have a specific repository&rdquo;. All of these replies give me ideas to your
hierarchy.  When you think of Hiera as a giant conditional statment, you can
start seeing how your hierarchy could be laid out.  With the first response, we
know we need a <code>location</code> fact to determine where a node is, and then we can
have a hierarchy level for that location. The second response tells me we need
a level for the application tier (i.e. dev/test/prod).  The third response tells
me we need a level that combines both the location and the application tier. When
you add in that you should probably have a node-specific level at the top (for
overrides) and a default level at the bottom (or not: see the next section), I&rsquo;m
starting to picture this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">:hierarchy</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="nl">&amp;ndash</span><span class="l-Scalar-Plain">; &amp;ldquo;nodes/%{::clientcert}&amp;rdquo;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; &amp;ldquo;%{::location}/%{::applicationtier}&amp;rdquo;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; &amp;ldquo;%{::location}/common&amp;rdquo;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; &amp;ldquo;tier/%{::applicationtier}&amp;rdquo;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; common</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Every time you have a need, you consider a level.  Now, obviously, it doesn&rsquo;t
mean that you NEED a level for every request (sometimes if it&rsquo;s an edge case
you can handle it in the profile or the role). There&rsquo;s a performance hit for
every level of your Hiera hierarchy, so ideally keep it minimal (or around
5 levels or so), but we&rsquo;re talking about flexibility here, and, if that&rsquo;s more
important than performance then you should go for it.</p>

<p>Next comes ordering. This one&rsquo;s SLIGHTLY easier &ndash; your hierarchy should read from
most-specific to least-specific. Note that when you specify an application tier
at a specific location that that it is MORE specific than just saying &ldquo;all nodes in
this application tier.&rdquo; Sometimes you will have levels that might be hard to
define an order &ndash; such as location vs. application tier. You kinda just have to
go with your gut here. In many cases you may find that the data you put in those
two levels will be entirely different (location-based data may not ever overlap
with application-tier-specific data). Do remember than any time you change the
order of your hierarchy you&rsquo;re going to introduce the possibility that values
get flip/flopped.</p>

<p>If you look at level 3 of the hierarchy above, you&rsquo;ll see that I have &lsquo;common&rsquo;
at the end. Some people like this syntax (where they put a &lsquo;common&rsquo; file in a
folder that matches the fact they&rsquo;re checking against), and some people prefer
a filename matching the fact.  Do what makes you happy, but, in this case,
we can unify the location folder and just put the common file underneath the
application tier files.</p>

<p>Finally, DO MAKE USE OF FOLDERS!  For the love of god, this. Putting all files
in a single folder both makes that a BIG folder, but also introduces a namespace
collision (i.e. what if you have a location named &lsquo;dev&rsquo; for example? Now you have
both an application tier and a location with the same name.  Oops).</p>

<p>How you setup your hierarchy is up to you, but this should hopefully give you
somewhere to start.</p>

<h2>Common.yaml, your organization&rsquo;s common values &ndash; <strong>REVISED</strong></h2>

<p><strong>UPDATE &ndash; 28 October</strong></p>

<p><em>Previously, this section was where I presented the idea of removing the lowest
level of the hierarchy as a way of ensuring that you didn&rsquo;t omit a value in Hiera
(the idea being that common values would be in the profile, anything higher would
be in Hiera, and all your &lsquo;defaults&rsquo;, or &lsquo;common values&rsquo; would be inside the profile).
The idea of removing the lowest level of the Hiera hierarchy was always something
I was kicking around in my head, but R.I. made a comment below that&rsquo;s made me revise
my thought process. There&rsquo;s still a greater concern around definitively tracking
down values pulled from Hiera, but I think we can accomplish that through other
means. I&rsquo;m going to revise what I wrote below to point out the relevant details.</em></p>

<p>When using Hiera, you need to define a hierarchy that Hiera uses in its search
for your data. Most often, it looks something like this:</p>

<h2><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>hiera.yaml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;:backends</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="nl">&amp;ndash</span><span class="l-Scalar-Plain">; yaml</span>
</span><span class='line'><span class="l-Scalar-Plain">:yaml</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">:datadir</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">/etc/puppetlabs/puppet/hieradata</span>
</span><span class='line'><span class="l-Scalar-Plain">:hierarchy</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="nl">&amp;ndash</span><span class="l-Scalar-Plain">; &amp;ldquo;nodes/%{::clientcert}&amp;rdquo;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; &amp;ldquo;location/%{::location}&amp;rdquo;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; &amp;ldquo;environment/%{::applicationtier}&amp;rdquo;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; common</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Notice that little &ldquo;common&rdquo; at the end?  That means that, failing everything
else, it&rsquo;s going to look in <code>common.yaml</code> for a value. I had thought of common
as the &lsquo;defaults&rsquo; level, but the reality is that it is a list of values common
across all the nodes in your infrastructure.  These are the values, SPECIFIC TO
YOUR ORGANIZATION, that should be the same everywhere. Barring an override at a
higher level, these values are your organization&rsquo;s &lsquo;defaults&rsquo;, if you will.</p>

<p>Previously, you may have heard me rail against Hiera&rsquo;s optional second argument
and how I really don&rsquo;t like it.  Take this example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="nv">$foo</span> <span class="o">=</span> <span class="nf">hiera</span><span class="p">(</span><span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">port</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">,</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="m">80</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Given this code, Hiera is going to look for a parameter called &lsquo;port&rsquo; in its
hierarchy, and, if it doesn&rsquo;t find one in ANY of the levels, assign back a default
value of &lsquo;80&rsquo;.  I don&rsquo;t like using this second argument because:</p>

<ol>
<li>If you forget to enter the &lsquo;port&rsquo; parameter into the hierarchy, or typo it in the YAML file, Hiera will gladly assign the default value of &lsquo;80&rsquo; (which, unless you&rsquo;re checking for this, might sneak and get into production)</li>
<li>Where is the real &lsquo;default&rsquo; value: the value in <code>common.yaml</code> or the optional second argument?</li>
</ol>


<p>It actually depends on where you do the hiera() call as to what &lsquo;kind&rsquo; of
default value this is. Note that previously we talked about how the &lsquo;common&rsquo;
level represented values common across your infrastructure. If you do this
hiera() call inside a profile (which is where I recommend it be done), providing
the optional second argument ends up being redundant (i.e. the value should be
inside Hiera).</p>

<p>The moral of this story being: values common to all nodes should be in the
lowest level of the Hiera hierarchy, and all explicit hiera calls should
omit the default second argument if that common value is expected to be found
in the hierarchy.</p>

<h2>Data Bindings</h2>

<p>In Puppet 3, we introduced the concept of &lsquo;data bindings&rsquo; for parameterized classes,
which meant that Puppet now had another choice for gathering parmeter values.
Previously, the order Puppet would look to assign a value for parameters to
classes was:</p>

<ol>
<li>A value passed to the class via the parameterized class syntax</li>
<li>A default value provided by the class</li>
</ol>


<p>As of Puppet 3, this is the new parameter assignment order:</p>

<ol>
<li>A value passed to the class via the parameterized class syntax</li>
<li>A Hiera lookup for <em>classname::parametername</em></li>
<li>A default value provided by the class</li>
</ol>


<p>Data bindings is meant to be pluggable to allow for ANY data backend, but,
as of this writing, there&rsquo;s currently only one: Hiera.  Because of this,
Puppet will now automatically do a Hiera lookup for every parameter to a
parameterized class that isn&rsquo;t explicitly passed a value via the parameterized
class syntax (which means that if you just do <code>include classname</code>, Puppet
will do a Hiera lookup for EVERY parameter defined to the &ldquo;classname&rdquo; class).</p>

<p>This is really cool because it means that you can just add <em>classname::parametername</em>
to your Hiera setup, and, as long as you&rsquo;re not EXPLICITLY passing that
parameter&rsquo;s value to the class, Puppet will do a lookup and find the value.</p>

<p>It&rsquo;s also completely transparent to you unless you know it&rsquo;s happening.</p>

<p>The issue here is that this is new functionality to Puppet, and it feels like
magic to me. You can make the argument and say &ldquo;If you don&rsquo;t start using it,
Gary, people will never take to it,&rdquo; however I feel like this kind of magical
lookup in the background is always going to be a bad thing.</p>

<p>There&rsquo;s also another problem.  Consider a Hiera hierarchy that has 15 levels
(they exist, TRUST ME).  What happens if you don&rsquo;t define ANY parameters in
Hiera in the form of <em>classname::parametername</em> and simply want to rely on
the default values for every class?  Well, it means that Hiera is STILL going
to be triggered for every parameter to a class that isn&rsquo;t explicitly passed a
value.  That&rsquo;s a hell of a performance hit.  Fortunately, there&rsquo;s a way to
disable this lookup.  Simply add the following to the Puppet master&rsquo;s <code>puppet.conf</code>
file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>data_binding_terminus = none</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It&rsquo;s going to be up to how your team needs to work as to whether you use Hiera
data bindings or not. If you have a savvy team that feels they can debug these
lookups, then cool &ndash; use the hell out of it. I prefer to err on the side of an
explicit hiera() lookup for every value I&rsquo;m querying, even if it&rsquo;s a lot of extra
lines of code. I prefer the visibility, especially for new members to your team.
For those people with large hierarchies, you may want to weigh the performance
hit.  Try to disable data bindings and see if your master is more performant. If
so, then explicit hiera() calls may actually buy you some rewards.</p>

<p><strong>PROS:</strong></p>

<ul>
<li>Adding parameters to Hiera in the style of <em>classname::parametername</em> will set parameterized class values automatically</li>
<li>Simplified code &ndash; simply use the include() function everywhere (which is safer than the parameterized class syntax)</li>
</ul>


<p><strong>CONS:</strong></p>

<ul>
<li>Lookup is completely transparent unless you know what&rsquo;s going on</li>
<li>Debugging parameter values can be difficult (especially with typos or forgetting to set values in Hiera)</li>
<li>Performance hit for values you want to be assigned the class default value</li>
</ul>


<h2>Where to data &ndash; Hiera or Profile?</h2>

<p>&ldquo;Does this go right into the Profile or into Hiera?&rdquo;  I get that question
repeatedly when I&rsquo;m working with customers. It&rsquo;s a good question, and one of
the quickest ways to blow up your YAML files in Hiera. Here&rsquo;s the order I use
when deciding where to put data:</p>

<h3>WHERE did that data come from?</h3>

<p>Remember that the profile is YOUR implementation &ndash; it describes how YOU define
the implementation of a piece of technology in YOUR organization. As such, it&rsquo;s
less about Puppet code and more about pulling data and passing it TO the Puppet
code. It&rsquo;s the glue-code that grabs the data and wires it up to the model that
uses it. How it grabs the data is not really a big deal, so long as it grabs
the RIGHT data &ndash; right? You can choose to hardcode it into the Profile, or use
Hiera, or use some other magical data lookup mechanism &ndash; we don&rsquo;t really care
(so long as the Profile gathers the data and passes it to the correct Puppet
class).</p>

<p>The PROBLEM here is debugging WHERE the data came from. As I said previously,
Hiera has a level for all bits of data common to your organization, and, obviously,
data overridden at a higher level takes precedence over the &lsquo;common&rsquo; level at
the bottom. With Hiera, unless you run the <code>hiera</code> binary in debug mode (-d),
you can never be completely sure where the data came from. Puppet has no way of
dumping out every variable and where it came from (whether Hiera or set directly
in the DSL, and, if it WAS Hiera, exactly what level or file it came from).</p>

<p>It is THIS REASON that causes me to eschew things like data bindings in Puppet.
Debugging where a value came from can be a real pain in the ass. If there were
amazing tooling around this, I would 100% support using data bindings and just
setting everything inside Hiera and using the include() function, but, alas,
that&rsquo;s not been my experience. Until then, I will continue to recommend explicit
<code>hiera</code> calls for visibility into when Hiera is being called and when values
are being set inside the DSL.</p>

<h3>Enter the data into the Profile</h3>

<p>One of the first choices people make is to enter the data (like ntpserver
address, java version, or whatever it is) directly into the Profile.
&ldquo;BUT GARY! IT&rsquo;S GOING TO MAKE IT HARD TO DEBUG!&rdquo;  Not really. You&rsquo;re going to
have to open the Profile anyway to see what&rsquo;s going on (whether you pull the
data from Hiera or hardcode it in the Profile), right? And, arguably, the
Profile is legible&hellip;doing Hiera lookups gives you flexibility at a cost of
abstracting away how it got that bit of data (i.e. &ldquo;It used Hiera&rdquo;). For newer
users of Puppet, having the data in the Profile is easier to follow. So, in the
end, putting the data into the Profile itself is the least-flexible and most-visible
option&hellip;so consequently people consider it as the first available option. This option
is good for common/default values, BUT, if you eventually want to use Hiera, you need
to re-enter the data into the common level of Hiera. It also splits up your
&ldquo;source of truth&rdquo; to include BOTH the Profile manifest and Hiera. In the end,
you need to weigh your team&rsquo;s goals, who has access to the Hiera repo, and
how flexible you need to be with your data.</p>

<p><strong>PROS:</strong></p>

<ul>
<li>Data is clearly visible and legible in the profile (no need to open additional files)</li>
</ul>


<p><strong>CONS:</strong></p>

<ul>
<li>Inability to redefine variables in Puppet DSL makes any settings constants by default (i.e. no overriding permitted)</li>
<li>Data outside of Hiera creates a second &ldquo;source of truth&rdquo;</li>
</ul>


<h3>Enter the data into Hiera</h3>

<p>If you find that you need to have different bits of data for different nodes
(i.e. a different version of Java in the dev tier instead of the prod tier),
then you can look to put the data into Hiera.  Where to put the data is going
to depend on your own needs &ndash; I&rsquo;m trusting that you can figure this part out &ndash; but
the bigger piece here is that once the data is in Hiera you need to ensure
you&rsquo;re getting the RIGHT data (i.e. if it&rsquo;s overridden at a higher level, you
are certain you entered it into the right file and didn&rsquo;t typo anything).</p>

<p>This answers that &ldquo;where&rdquo; question, but doesn&rsquo;t answer the &ldquo;what&rdquo; question&hellip;as
in &ldquo;What data should I put into Hiera?&rdquo;  For that, we have another section&hellip;</p>

<p><strong>PROS:</strong></p>

<ul>
<li>Flexibility in returning different values based on different conditions</li>
<li>All the data is inside one &lsquo;source of truth&rsquo; for data according to your organization</li>
</ul>


<p><strong>CONS:</strong></p>

<ul>
<li>Visibility &ndash; you must do a Hiera lookup to find the value (or open Hiera&rsquo;s YAML files)</li>
</ul>


<h2>&ldquo;What exactly goes into Hiera?&rdquo;</h2>

<p>If there were one question that, if answered incorrectly, could make or break
your Puppet deployment, this would be it. The greatest strength and weakness of
Hiera is its flexibility.  You can truly put almost anything in Hiera, and, when
combined with something like the create_resources() function, you can create
your own YAML configuration language (tip: don&rsquo;t actually do this).</p>

<p>&ldquo;But, seriously, what should go into Hiera, and what shouldn&rsquo;t?&rdquo;</p>

<p>The important thing to consider here is the price you pay by putting data into
Hiera. You&rsquo;re gaining flexibility at a cost of visibility.  This means that you
can do things like enter values at all level of the hierarchy that can be
concatenated together with a single hiera_array() call, BUT, you&rsquo;re losing the
visibility of having the data right in front of you (i.e. you need to open up
all the YAML files individually, or use the <code>hiera</code> binary to debug how you got
those values). Hiera is REALLY COOL until you have to debug why it grabbed (or
DIDN&rsquo;T grab) a particular value.</p>

<p>Here&rsquo;s what I usually tell people about what should be put into Hiera:</p>

<ul>
<li>The exact data values that need to be different conditionally (i.e. a different ntp server for different sites, different java versions in dev/prod, a password hash, etc.)</li>
<li>Dynamic data expressed in multiple levels of the hierarchy (i.e. a lookup for &lsquo;packages&rsquo; that returns back an array of all the values that were found in all the levels of the hierarchy)</li>
<li>Resources as a hash ONLY WHEN ABSOLUTELY NECESSARY</li>
</ul>


<h3>Puppet manifest vs. create_resources()</h3>

<p>Bullets 1 and 2 above should be pretty straightforward &ndash; you either need to use
Hiera to grab a specific value or return back a list of ALL the values from ALL
the levels of the hierarchy. The point here is that Hiera should be returning
back only the minimal amount of data that is necessary (i.e. instead of
returning back a hash that contains the title of the resource, all the attributes
of the resource, and all the attribute values for that resource, just return
back a specific value that will be assigned to an attribute&hellip;like the password
hash itself for a user). This data lookup appears to be &ldquo;magic&rdquo; to new users of
Puppet &ndash; all they see is the magic phrase of &ldquo;hiera&rdquo; and a parameter to search
for &ndash; and so it becomes slightly confusing. It IS, however, easier to understand
that this magical phrase will return data, and that that data is going to be used
to set the value for an attribute. Consider this example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="nv">$password</span> <span class="o">=</span> <span class="nf">hiera</span><span class="p">(</span><span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">garypassword</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/</span><span class="ss">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="ss">p</span><span class="o">&gt;</span><span class="ss">user</span> <span class="err">{</span> <span class="err">&amp;lsquo;gary&amp;rsquo;:</span>
</span><span class='line'>  <span class="err">ensure</span>   <span class="err">=&gt;</span> <span class="err">present,</span>
</span><span class='line'>  <span class="err">uid</span>      <span class="err">=&gt;</span> <span class="err">&amp;lsquo;5001&amp;rsquo;,</span>
</span><span class='line'>  <span class="err">gid</span>      <span class="err">=&gt;</span> <span class="err">&amp;lsquo;gary&amp;rsquo;,</span>
</span><span class='line'>  <span class="err">shell</span>    <span class="err">=&gt;</span> <span class="err">&amp;lsquo;zsh&amp;rsquo;,</span>
</span><span class='line'>  <span class="err">password</span> <span class="err">=&gt;</span> <span class="nv">$password</span><span class="err">,</span>
</span><span class='line'><span class="err">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This leads us to bullet 3, which is &ldquo;the Hiera + create_resources() solution.&rdquo;
This solution allows you to lookup data from within Hiera and pass it directly
to a function where Puppet creates the individual resources as if you had typed
them into a Puppet manifest itself. The previous example can be entered into
a Hiera YAML file like so:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>sysadmins.yaml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">users</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">gary:&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;pre&gt;&lt;code&gt;ensure</span><span class="p-Indicator">:</span> <span class="s">&#39;present&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">uid</span><span class="p-Indicator">:</span> <span class="s">&#39;5001&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">gid</span><span class="p-Indicator">:</span> <span class="s">&#39;gary&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">shell</span><span class="p-Indicator">:</span> <span class="s">&#39;zsh&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="s">&#39;biglongpasswordhash&#39;</span>
</span><span class='line'><span class="l-Scalar-Plain">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And then a resource can be created inside the Puppet DSL by doing the following:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="nv">$users</span> <span class="o">=</span> <span class="nf">hiera</span><span class="p">(</span><span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">users</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">)</span>
</span><span class='line'><span class="nf">create_resources</span><span class="p">(</span><span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">users</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Both examples are functionally identical, except the first one only uses Hiera
to get the password hash value, whereas the second one grabs both the
attributes, and their values, for a specific resource. Imagine Puppet gives you
an error with the &lsquo;gary&rsquo; user resource and you were using the latter example.
You grep your Puppet code looking for &lsquo;gary&rsquo;, but you won&rsquo;t find that user
resource in your Puppet manifest anywhere (because it&rsquo;s being created with the create_resources() function).
You will instead have to know to go into Hiera&rsquo;s data directory, then the
correct datafile, and then look for the hash of values for the &lsquo;gary&rsquo; user.</p>

<h3>Functional differences between the two approaches</h3>

<p>Functionally, you COULD do this either way. When you come up with a solution
using create_resources(), I challenge you to draw up another solution using
Puppet code in a Puppet manifest (however lengthy it may be) that queries Hiera
for ONLY the specific values necessary. Consider this example, but, instead,
you need to manage 500 users.
If you use create_resources(), you would then need to add 500 more blocks to
the &lsquo;users&rsquo; parameter in your Hiera datafiles.  That&rsquo;s a lot of YAML. And on
what level will you add these blocks? <code>prod.yaml</code>? <code>dev.yaml</code>? Are you using a
<code>common.yaml</code>? Your YAML files suddenly got huge, and the rest of your team
modifying them will not be so happy to scroll through 500 entries. Now consider
the first example using Puppet code. Your Puppet manifest suddenly grew, but it
didn&rsquo;t affect all the OTHER manifests out there: only this file. The Hiera YAML
files will still grow &ndash; but now 500 individual lines instead of 3000 lines in
the previous example. Okay, now which one is more LEGIBLE? I would argue that
the Puppet manifest is more legible, because I consider the Puppet DSL to be
very legible (again, subject to debate versus YAML). Moreover, when debugging,
you can stay inside Puppet files more often using Puppet manifests to define
your resources. Using create_resources, you need to jump into Hiera more often.
That&rsquo;s a context shift, which adds more annoyance to debugging. Also, it
creates multiple &ldquo;sources of truth.&rdquo; Suddenly you have the ability of entering
data in Hiera as well as entering it in the Puppet manifest, which may be clear
to YOU, but if you leave the company, or you get another person on your team,
they may choose to abuse the Hiera settings without knowing why.</p>

<p>Now consider an example that you might say is more tailored to create_resources().
Say you have a defined type that sets up tomcat applications. This defined type
accepts things like a path to install the application, the application&rsquo;s package
name, the version, which tomcat installation to target, and etc. Now consider
that all application servers need application1, but only a couple
of servers need application2, and a very snowflake server needs application3 (in
this case, we&rsquo;re NOT saying that all applications are on all boxes and that their
data, like the version they&rsquo;re using, is different. We&rsquo;re actually saying that
different machines require entirely different applications).</p>

<p>Using Hiera + create_resources() you could enter the resource for the
application1 at a low level, then, at a higher level, add the resource for
application2, and finally add the resource for application3 at the
node-specific level. In the end, you can do a hiera_hash() lookup to discover
and concatenate all resources from all levels of the hierarchy and pipe that to
create_resources.</p>

<p>How would you do this with Puppet code?  Well, I would create profiles for every
application, and either different roles for the different kinds of servers (i.e.
the snowflake machine gets its own role), or conditional checks inside the role
(i.e. if this node is at the London location, it gets these application profiles,
and etc&hellip;).</p>

<p>Now which is more legible? At this point, I&rsquo;d still say that separate profiles
and conditional checks in roles (or sub-roles) are more legible &ndash; including
a class is a logical thing to follow, and conditionals inside Puppet code are
easy to follow. The create_resources() solution just becomes magic. Suddenly,
applications are on the node. If you want to know where they came from, you
have to switch contexts and open Hiera data files or use the <code>hiera</code> binary
and do a debug run. If you&rsquo;re a small team that&rsquo;s been using Puppet forever,
then rock on and go for it. If you&rsquo;re just getting started, though, I&rsquo;d shy
away.</p>

<h3>Final word on create_resources?</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Some people, when confronted with a problem, think “I know, I&rsquo;ll use create_resources().&ldquo;
</span><span class='line'>Now they have two problems.</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The create_resources() function is often called the &ldquo;PSE Swiss Army knife&rdquo;
(or, Professional Services Engineer &ndash; the people who do what
I do and consult with our customers) because we like to break it out when we&rsquo;re
painted into a corner by customer requirements. It will work ANYWHERE, but, again,
at that cost of visibility. I am okay with someone using it so long as they
understand the cost of visibility and the potential debugging issues they&rsquo;ll hit.
I will always argue against using it, however, for those reasons. More code in
a Puppet manifest is not a bad thing&hellip;especially if it&rsquo;s reasonably legible
code that can be kept to a specific class. Consider the needs and experience
level of your team before using create_resources() &ndash; if you don&rsquo;t have a good
reason for using it, simply don&rsquo;t.</p>

<h3>create_resources()</h3>

<p><strong>PROS:</strong></p>

<ul>
<li>Dynamically iterate and create resources based on Hiera data</li>
<li>Using Hiera&rsquo;s hash merging capability, you can functionally override resource values at higher levels of the hierarchy</li>
</ul>


<p><strong>CONS:</strong></p>

<ul>
<li>Decreased visibility</li>
<li>Becomes a second &lsquo;source of truth&rsquo; to Puppet</li>
<li>Can increase confusion about WHERE to manage resources</li>
<li>When used too much, it creates a DSL to Puppet&rsquo;s DSL (DSLs all the way down)</li>
</ul>


<h3>Puppet DSL + single Hiera lookup</h3>

<p><strong>PROS:</strong></p>

<ul>
<li>More visible (sans the bit of data you&rsquo;re looking up)</li>
<li>Using wrapper classes allows for flexibility and conditional inclusion of resources/classes</li>
</ul>


<p><strong>CONS:</strong></p>

<ul>
<li>Very explicit &ndash; doesn&rsquo;t have the dynamic overriding capability like Hiera does</li>
</ul>


<h2>Using Hiera as an ENC</h2>

<p>One of the early &ldquo;NEAT!&rdquo; moments everyone has with Hiera is using it as an
External Node Classifier, or ENC. There is a function called <code>hiera_include()</code>
that allows you to include classes into the catalog as if you were to write
&ldquo;include (classname)&rdquo; in a Puppet manifest.  It works like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>london.yaml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">classes</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="nl">&amp;ndash</span><span class="l-Scalar-Plain">; profiles::london::base</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; profiles::london::network</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>dev.yaml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">classes</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="nl">&amp;ndash</span><span class="l-Scalar-Plain">; profiles::tomcat::application2</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>site.pp</span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="kd">node</span> <span class="s">default</span> <span class="p">{</span>
</span><span class='line'>  <span class="nf">hiera_include</span><span class="p">(</span><span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">classes</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">)</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Given the above example, the hiera_include() function will search every level
of the hierarchy looking for a parameter called &lsquo;classes&rsquo;. It returns
a concatenated list of classnames, which it then passes to Puppet&rsquo;s include()
function (in the end, Puppet will declare the profiles::london::base,
profiles::london::network, and profiles::tomcat::application2 classes). Puppet
puts the contents of these classes into the catalog, and away we go. This is
awesome because you can change the classification of a node conditionally
according to a Hiera lookup, and it&rsquo;s terrible because you can CHANGE THE
CLASSIFICATION OF A NODE CONDITIONALLY ACCORDING TO A HIERA LOOKUP!  This means
that anyone with access to the repo holding your Hiera data files can affect
changes to every node in Puppet just by modifying a magical key. It also means
that in order to see the classification for a node, you need to do a Hiera
lookup (i.e. you can&rsquo;t just open a file and see it).</p>

<p>Remember that WHOLE blog post about Roles and Profiles?  I do, because I wrote
the damn thing. <a href="http://bit.ly/puppetworkflows2">You can even go back and read it again, too, if you want to.</a>
One of the core tenets of that article was that each node get classified with a
single role. If you adhere to that (and you should; it makes for a much more
logical Puppet deployment), a node really only ever needs to be classified
ONCE. You don&rsquo;t NEED this conditional classification behavior. It&rsquo;s one of those
&ldquo;It seemed like a good idea at the time&rdquo; moments that I assure you will pass.</p>

<p>Now, you CAN use Roles with hiera_include() &ndash; simply create a Facter fact that
returns the node&rsquo;s role, add a level to the Hiera hierarchy for this role fact,
and in the role&rsquo;s YAML file in Hiera, simply do:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>appserver.yaml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">classes</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">role::application_server</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then you can use the same hiera_include() call in the default node definition
in <code>site.pp</code>. The ONLY time I recommend this is if you don&rsquo;t already have some
other classification method. The downside of this method is that if your role
fact CHANGES, for some reason or another, classification immediately changes.
Facts are NOT secure &ndash; they can be overridden really easily. I don&rsquo;t like to
leave classification to an insecure method that anyone with root access on a
machine can change. Using an ENC or <code>site.pp</code> for classification means that the
node ABSOLUTELY CANNOT override its classification. It&rsquo;s the difference between
being authoritative and simply &lsquo;suggesting&rsquo; a classification.</p>

<p><strong>PROS:</strong></p>

<ul>
<li>Dynamic classification: no need to maintain a site.pp file or group in the Console</li>
<li>Fact-based: a node&rsquo;s classification can change immediately when its role fact does</li>
</ul>


<p><strong>CONS:</strong></p>

<ul>
<li>Decreased visibility: need to do a Hiera lookup to determine classification</li>
<li>Insecure: since facts are insecure and can be overridden, so can classification</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On R10k and 'Environments']]></title>
    <link href="http://garylarizza.com/blog/2014/03/26/random-r10k-workflow-ideas/"/>
    <updated>2014-03-26T01:00:00-07:00</updated>
    <id>http://garylarizza.com/blog/2014/03/26/random-r10k-workflow-ideas</id>
    <content type="html"><![CDATA[<p>There have been more than a couple of moments where I&rsquo;m on-site with a customer
who asks a seemingly simple question and I&rsquo;ve gone &ldquo;Oh shit; that&rsquo;s a great
question and I&rsquo;ve never thought of that&hellip;&rdquo;  Usually that&rsquo;s followed by me
changing up the workflow and immediately regretting things I&rsquo;ve done on prior
gigs. Some people call that &lsquo;agile&rsquo;; I call it &lsquo;me not having the
forethought to consider conditions properly&rsquo;.</p>

<h2>&lsquo;Environment&rsquo;, like &lsquo;scaling&rsquo;, &lsquo;agent&rsquo;, and &lsquo;test&rsquo;, has many meanings</h2>

<p>It&rsquo;s not a secret that we&rsquo;ve made some shitty decisions in the past with regard
to naming things in Puppet (and anyone who asks me what <code>puppet agent -t</code>
stands for usually gets a heavy sigh, a shaken head, and an explanation emitted
in dulcet, apologetic tones). It&rsquo;s also very easy to conflate certain concepts
that unfortunately share very common labels (quick &ndash; what&rsquo;s the difference
between properties and parameters, and give me the lowdown on MCollective
agents versus Puppet agents!).</p>

<p>And then we have &lsquo;environments&rsquo; + Hiera + R10k.</p>

<h3>Puppet &lsquo;environments&rsquo;</h3>

<p>Puppet has the concept of &lsquo;environments&rsquo;, which, to me, exist to provide a
means of compiling a catalog using different paths to Puppet modules on the
Puppet master. Using a Puppet environment is the same as saying &ldquo;I made some
changes to my tomcat class, but I don&rsquo;t want to push it DIRECTLY to my production
machines yet because I don&rsquo;t drink Dos Equis. It would be great if I could stick
this code somewhere and have a couple of my nodes test how it works before
merging it in!&rdquo;</p>

<p>Puppet environments suffer some &lsquo;seepage&rsquo; issues,
<a href="http://projects.puppetlabs.com/issues/12173">which you can read about here,</a> but do a reasonable job of quickly
testing out changes you&rsquo;ve made to the Puppet DSL (as opposed to custom
plugins, as detailed in the bug). Puppet environments work well when you
need a pipeline for testing your Puppet code (again, when you&rsquo;re refactoring
or adding new functionality), and using them for that purpose is great.</p>

<h3>Internal &lsquo;environments&rsquo;</h3>

<p>What I consider &lsquo;internal environments&rsquo; have a couple of names &ndash; sometimes
they&rsquo;re referred to as application or deployment gateways, sometimes as &lsquo;tiers&rsquo;, but
in general they&rsquo;re long-term groupings that machines/nodes are attached to
(usually for the purpose of phased-out application deployments). They
frequently have names such as &lsquo;dev&rsquo;, &lsquo;test&rsquo;, &lsquo;prod&rsquo;, &lsquo;qa&rsquo;, &lsquo;uat&rsquo;, and the
like.</p>

<p>For the purpose of distinguishing them from Puppet environments, I&rsquo;m going to
refer to them as &lsquo;application tiers&rsquo; or just &lsquo;tiers&rsquo; because, fuck it, it&rsquo;s a
word.</p>

<h3>Making both of them work</h3>

<p>The problems with having Puppet environments and application tiers are:</p>

<ul>
<li>Puppet environments are usually assigned to a node for short periods of time,
while application tiers are usually assigned to a node for the life of the node.</li>
<li>Application tiers usually need different bits of data (i.e. NTP server
addresses, versions of packages, etc), while Puppet environments usually
use/involve differences to the Puppet DSL.</li>
<li>Similarly to the first point, the goal of Puppet environments is to eventually
merge code differences into the main production Puppet environment. Application
tiers, however, may always have differences about them and never become unified.</li>
</ul>


<p>You can see where this would be problematic &ndash; especially when you might want to
do things like use different Hiera values between different application tiers,
but you want to TEST out those values before applying them to all nodes in an
application tier. If you previously didn&rsquo;t have a way to separate Puppet
environments from application tiers, and you used R10k to generate Puppet
environments, you would have things like long-term branches in your repositories
that would make it difficult/annoying to manage.</p>

<p><strong>NOTE: This is all assuming you&rsquo;re managing component modules, Hiera data,
and Puppet environments using R10k.</strong></p>

<p>The first step in making both monikers work together is to have two separate
variables in Puppet &ndash; namely <code>$environment</code> for Puppet environments, and
something ELSE (say, <code>$tier</code>) for the application tier. The &ldquo;something else&rdquo; is
going to depend on how your workflow works. For example, do you have something
centrally that can correlate nodes to the tier in which they belong? If so, you
can write a custom fact that will query that service. If you don&rsquo;t have this
magical service, you can always just attach an application tier to a node in
your classification service (i.e. the Puppet Enterprise Console or Foreman).
Failing both of those, <a href="http://docs.puppetlabs.com/guides/custom_facts.html#external-facts">you can look to external facts.</a> External Fact
support was introduced into Facter 1.7 (but Puppet Enterprise has supported
them through the standard lib for quite awhile). External facts give you the
ability to create a text file inside the facts.d directory in the format of:</p>

<p><code>
tier=qa
location=portland
</code></p>

<p>Facter will read this text file and store the values as facts for a Puppet run,
so <code>$tier</code> will be <code>qa</code> and <code>$location</code> will be <code>portland</code>. This is handy for
when you have arbitrary information that can&rsquo;t be easily discovered by the
node, but DOES need to be assigned for the node on a reasonably consistent
basis.  Usually these files are created during the provisioning process, but
can also be managed by Puppet.  At any rate, having <code>$environment</code> and <code>$tier</code>
available allow us to start to make decisions based on the values.</p>

<h3>Branch with $environment, Hiera with $tier</h3>

<p>Like we said above, Puppet environments are frequently short-term assignments,
while application tiers are usually long-term residencies. Relating those back
to the R10k workflow: branches to the main puppet repo (containing the
<code>Puppetfile</code>) are usually short-lived, while data in Hiera is usually
longer-lived. It would then make sense that the name of the branches to the
main puppet repo would resolve to being <code>$environment</code> (and thus the Puppet
environment name), and <code>$tier</code> (and thus the application tier) would be used
in the Hiera hierarchy for lookups of values that would remain different across
application tiers (like package versions, credentials, and etc&hellip;).</p>

<p>Wins:</p>

<ul>
<li>Puppet environment names (like repository branch names) become relatively
meaningless and are the &ldquo;means&rdquo; to the end of getting Puppet code merged into
the PUPPET CODE&rsquo;s production branch (i.e. code that has been tested to work
across all application tiers)</li>
<li>Puppet environments become short lived and thus have less opportunity to
deviate from the main production codebase</li>
<li>Differences across application tiers are locked in one place (Hiera)</li>
<li>Differences to Puppet DSL code (i.e. in Manifests) can be pushed up to the
profile level, and you have a fact (<code>$tier</code>) to catch those differences.</li>
</ul>


<p>The ultimate reason why I&rsquo;m writing about this is because I&rsquo;ve seen people try
to incorporate both the Puppet environment and application tier into both the
environment name and/or the Hiera hierarchy. Many times, they run into all
kinds of unscalable issues (large hierarchies, many Puppet environments,
confusing testing paths to &lsquo;production&rsquo;). I tend to prefer this workflow
choice, but, like everything I write about, take it and model it toward what
works for you (because what works now may not work 6 months from now).</p>

<h2>Thoughts?</h2>

<p>Like I said before, I tend to discover new corner cases that change my mind
on things like this, so it&rsquo;s quite possible that this theory isn&rsquo;t the most
solid in the world. It HAS helped out some customers to clean up their code
and make for a cleaner pipeline, though, and that&rsquo;s always a good thing. Feel
free to comment below &ndash; I look forward to making the process better for all!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When to Hiera (aka: How do I Module?)]]></title>
    <link href="http://garylarizza.com/blog/2013/12/08/when-to-hiera/"/>
    <updated>2013-12-08T15:31:54-08:00</updated>
    <id>http://garylarizza.com/blog/2013/12/08/when-to-hiera</id>
    <content type="html"><![CDATA[<p>I&rsquo;m convinced that writing Puppet modules is the ultimate exercise in bikeshedding:
if it works, someone&rsquo;s probably going to tell you that you could have done it better,
if you&rsquo;re using the methods suggested today, they&rsquo;re probably going to be out-of-date
in about 6 months, and good luck writing something that someone else can use cleanly
without needing to change it.</p>

<p>I can help you with the last two.</p>

<h2>Data and Code Separation == bliss?</h2>

<p><a href="http://bit.ly/puppetdata">I wrote a blog post about 2 years ago</a> detailing why separating
your data from your Puppet code was a good idea. The idea is still valid, which means
it&rsquo;s probably one of the better ideas I&rsquo;ve ever stolen (Does anyone want any HD-DVDs?).
Hunter Haugen and I <a href="http://bit.ly/hierablog">put together a quick blog post on using Hiera</a>
to solve the data/code problem because there wasn&rsquo;t a great bit of documentation on Hiera
at that point in time. Since then, Hiera&rsquo;s been widely accepted as &ldquo;a good idea&rdquo; and is
in use in production Puppet environments around the world. In most every environment,
usage of Hiera by more than just one person eventually gives birth to the question
that inspired this post:</p>

<h4>&ldquo;What the hell does and does NOT belong in Hiera?&rdquo;</h4>

<h2>Puppet data models</h2>

<h3>The params class pattern</h3>

<p>Many Puppet modules out there since Puppet 2.6 have begun using this pattern:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>puppetlabs-mysql/manifests/server.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="kd">class</span> <span class="nc">mysql::server</span> <span class="p">(</span>
</span><span class='line'>  <span class="nv">$config_file</span>             <span class="p">=</span> <span class="nv">$mysql::params::config_file</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$manage_config_file</span>      <span class="p">=</span> <span class="nv">$mysql::params::manage_config_file</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$old_root_password</span>       <span class="p">=</span> <span class="nv">$mysql::params::old_root_password</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$override_options</span>        <span class="p">=</span> <span class="p">{},</span>
</span><span class='line'>  <span class="nv">$package_ensure</span>          <span class="p">=</span> <span class="nv">$mysql::params::server_package_ensure</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$package_name</span>            <span class="p">=</span> <span class="nv">$mysql::params::server_package_name</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$purge_conf_dir</span>          <span class="p">=</span> <span class="nv">$mysql::params::purge_conf_dir</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$remove_default_accounts</span> <span class="p">=</span> <span class="ss">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$restart</span>                 <span class="p">=</span> <span class="nv">$mysql::params::restart</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$root_group</span>              <span class="p">=</span> <span class="nv">$mysql::params::root_group</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$root_password</span>           <span class="p">=</span> <span class="nv">$mysql::params::root_password</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$service_enabled</span>         <span class="p">=</span> <span class="nv">$mysql::params::server_service_enabled</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$service_manage</span>          <span class="p">=</span> <span class="nv">$mysql::params::server_service_manage</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$service_name</span>            <span class="p">=</span> <span class="nv">$mysql::params::server_service_name</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$service_provider</span>        <span class="p">=</span> <span class="nv">$mysql::params::server_service_provider</span><span class="p">,</span><span class="c-Singleline"></span>
</span><span class='line'><span class="c-Singleline">  # Deprecated parameters</span>
</span><span class='line'>  <span class="nv">$enabled</span>                 <span class="p">=</span> <span class="ss">undef</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$manage_service</span>          <span class="p">=</span> <span class="ss">undef</span>
</span><span class='line'><span class="p">)</span> <span class="kd">inherits</span> <span class="nc">mysql::params</span> <span class="p">{</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="c-Singleline">  ## Puppet goodness goes here</span>
</span><span class='line'>}<span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If you&rsquo;re not familiar, this is a Puppet class definition for <code>mysql::server</code> that has several parameters
defined and defaulted to values that come out of the <code>mysql::params</code> class.  The
<code>mysql::params</code> class looks a bit like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>puppetlabs-mysql/manifests/params.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="kd">class</span> <span class="nc">mysql::params</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">case</span> <span class="nv">$::osfamily</span> <span class="p">{</span><span class="err">&lt;/</span><span class="ss">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">pre</span><span class="err">&gt;&lt;</span><span class="ss">code</span><span class="err">&gt;</span><span class="s1">&#39;RedHat&#39;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>  <span class="kr">if</span> <span class="nv">$::operatingsystem</span> <span class="o">==</span> <span class="s1">&#39;Fedora&#39;</span> <span class="o">and</span> <span class="p">(</span><span class="ss">is_integer</span><span class="p">(</span><span class="nv">$::operatingsystemrelease</span><span class="p">)</span> <span class="o">and</span> <span class="nv">$::operatingsystemrelease</span> <span class="err">&amp;</span><span class="ss">gt</span><span class="err">;=</span> <span class="ss">19</span> <span class="o">or</span> <span class="nv">$::operatingsystemrelease</span> <span class="o">==</span> <span class="s2">&quot;Rawhide&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$client_package_name</span> <span class="o">=</span> <span class="s1">&#39;mariadb&#39;</span>
</span><span class='line'>    <span class="nv">$server_package_name</span> <span class="o">=</span> <span class="s1">&#39;mariadb-server&#39;</span>
</span><span class='line'>  } <span class="kr">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$client_package_name</span> <span class="o">=</span> <span class="s1">&#39;mysql&#39;</span>
</span><span class='line'>    <span class="nv">$server_package_name</span> <span class="o">=</span> <span class="s1">&#39;mysql-server&#39;</span>
</span><span class='line'>  }
</span><span class='line'>  <span class="nv">$basedir</span>             <span class="o">=</span> <span class="s1">&#39;/usr&#39;</span>
</span><span class='line'>  <span class="nv">$config_file</span>         <span class="o">=</span> <span class="s1">&#39;/etc/my.cnf&#39;</span>
</span><span class='line'>  <span class="nv">$datadir</span>             <span class="o">=</span> <span class="s1">&#39;/var/lib/mysql&#39;</span>
</span><span class='line'>  <span class="nv">$log_error</span>           <span class="o">=</span> <span class="s1">&#39;/var/log/mysqld.log&#39;</span>
</span><span class='line'>  <span class="nv">$pidfile</span>             <span class="o">=</span> <span class="s1">&#39;/var/run/mysqld/mysqld.pid&#39;</span>
</span><span class='line'>  <span class="nv">$root_group</span>          <span class="o">=</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;Debian&#39;</span><span class="p">:</span> <span class="p">{</span><span class="c-Singleline"></span>
</span><span class='line'><span class="c-Singleline">  ## More parameters defined here</span>
</span><span class='line'>}
</span><span class='line'><span class="err">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="ss">pre</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">p</span><span class="err">&gt;</span>  <span class="p">}</span>
</span><span class='line'>}<span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This pattern puts all conditional logic for all the variables/parameters used
in the module inside one class &ndash; the <code>mysql::params</code> class.  It&rsquo;s called the
&lsquo;params class pattern&rsquo; because we suck at naming things.</p>

<h4>Pros:</h4>

<ul>
<li>All conditional logic is in a single class</li>
<li>You always know which class to seek out if you need to change any of the logic used to determine a variable&rsquo;s value</li>
<li>You can use the include function because parameters for each class will be defaulted to the values that came out of the params class</li>
<li>If you need to override the value of a particular parameter, you can still use the parameterized class declaration syntax to do so</li>
<li>Anyone using Puppet version 2.6 or higher can use it (i.e. anyone who&rsquo;s been using Puppet since about 2010).</li>
</ul>


<h5>Cons:</h5>

<ul>
<li>Conditional logic is repeated in every module</li>
<li>You will need to use inheritance to inherit parameter values in each subclass</li>
<li>It&rsquo;s another place to look if you ALSO use Hiera inside the module</li>
<li>Data is inside the manifest, so business logic is also inside params.pp</li>
</ul>


<h3>Hiera defaults pattern</h3>

<p>When Hiera hit the scene, one of the first things people tried to do was
to incorporate it into existing modules. The logic at that time was that
you could keep all parameter defaults inside Hiera, rid yourself of the
params class, and then just make Hiera calls out for your data. This
pattern looks like this:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>puppetlabs-mysql/manifests/server.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="kd">class</span> <span class="nc">mysql::server</span> <span class="p">(</span>
</span><span class='line'>  <span class="nv">$config_file</span>             <span class="p">=</span> <span class="nf">hiera</span><span class="p">(</span><span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">mysql</span><span class="err">::</span><span class="ss">params</span><span class="err">::</span><span class="ss">config_file</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">,</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">default</span> <span class="ss">value</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">$manage_config_file</span>      <span class="p">=</span> <span class="nf">hiera</span><span class="p">(</span><span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">mysql</span><span class="err">::</span><span class="ss">params</span><span class="err">::</span><span class="ss">manage_config_file</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">,</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">default</span> <span class="ss">value</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">$old_root_password</span>       <span class="p">=</span> <span class="nf">hiera</span><span class="p">(</span><span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">mysql</span><span class="err">::</span><span class="ss">params</span><span class="err">::</span><span class="ss">old_root_password</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">,</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">default</span> <span class="ss">value</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">),</span><span class="c-Singleline"></span>
</span><span class='line'><span class="c-Singleline">  ## Repeat the above pattern</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="c-Singleline">  ## Puppet goodness goes here</span>
</span><span class='line'>}<span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Pros:</h4>

<ul>
<li>All data is locked up in Hiera (and its multiple backends)</li>
<li>Default values can be provided if a Hiera lookup fails</li>
</ul>


<h4>Cons:</h4>

<ul>
<li>You need to have Hiera installed, enabled, and configured to use this pattern</li>
<li>All data, including non-business logic, is in Hiera</li>
<li>If you use the default value, data could either come from Hiera OR the default (multiple places to look when debugging)</li>
</ul>


<h3>Hybrid data model</h3>

<p>This pattern is for those people who want the portability of the params.pp class
combined with the power of Hiera. Because it&rsquo;s a hybrid, there are multiple ways
that people have set it up.  Here&rsquo;s a general example:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>puppetlabs-mysql/manifests/server.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="kd">class</span> <span class="nc">mysql::server</span> <span class="p">(</span>
</span><span class='line'>  <span class="nv">$config_file</span>             <span class="p">=</span> <span class="nf">hiera</span><span class="p">(</span><span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">mysql</span><span class="err">::</span><span class="ss">params</span><span class="err">::</span><span class="ss">config_file</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">,</span> <span class="nv">$mysql::params::config_file</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">$manage_config_file</span>      <span class="p">=</span> <span class="nf">hiera</span><span class="p">(</span><span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">mysql</span><span class="err">::</span><span class="ss">params</span><span class="err">::</span><span class="ss">manage_config_file</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">,</span> <span class="nv">$mysql::params::manage_config_file</span><span class="p">),</span>
</span><span class='line'>  <span class="nv">$old_root_password</span>       <span class="p">=</span> <span class="nf">hiera</span><span class="p">(</span><span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">mysql</span><span class="err">::</span><span class="ss">params</span><span class="err">::</span><span class="ss">old_root_password</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">,</span> <span class="nv">$mysql::params::old_root_password</span><span class="p">),</span><span class="c-Singleline"></span>
</span><span class='line'><span class="c-Singleline">  ## Repeat the above pattern</span>
</span><span class='line'><span class="p">)</span> <span class="kd">inherits</span> <span class="nc">mysql::params</span> <span class="p">{</span><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>Pros:</h4>

<ul>
<li>Data is sought from Hiera first and then defaulted back to the params class parameter</li>
<li>Keep non-business logic (i.e. OS specific data) in the params class and business logic in Hiera</li>
<li>Added benefits of both models</li>
</ul>


<h4>Cons:</h4>

<ul>
<li>Where did the variable get set &ndash; Hiera or the params class? Debugging can be hard</li>
<li>Requires Hiera to be setup to use the module</li>
<li>If you fudge a variable name in Hiera, you get the params class default &ndash; see Con #1</li>
</ul>


<h3>Hiera data bindings in Puppet 3.x.x</h3>

<p>In Puppet 3.0.0, there was a concept introduced called Data Bindings. This created
a federated data model automatically incorporating a Hiera lookup. Previously, the
order that Puppet would use to determine the value of a parameter was to first use
a value passed with the parameterized class declaration syntax (i.e. the below:).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>parameterized class declaration </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="nc">class</span> <span class="p">{</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">apache</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">:</span>
</span><span class='line'>  <span class="nt">package_name</span> <span class="p">=&gt;</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">httpd</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If a parameter was not passed with the parameterized class syntax (like the &lsquo;package_name&rsquo;
parameter above'), Puppet would then look for a default value inside the class definition
(i.e. the below:).</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>parameter default in a class definition </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="kd">class</span> <span class="nc">ntp</span> <span class="p">(</span>
</span><span class='line'>  <span class="nv">$ntpserver</span> <span class="p">=</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">default</span><span class="m">.</span><span class="ss">ntpserver</span><span class="m">.</span><span class="ss">org</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span><span class="c-Singleline"></span>
</span><span class='line'><span class="c-Singleline">  # Use $ntpserver in a file declaration&amp;hellip;</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>If the value of &lsquo;ntpserver&rsquo; wasn&rsquo;t passed with a parameterized class declaration,
then the value would be set to &lsquo;default.ntpserver.org&rsquo;, since that&rsquo;s the default
set in the above class definition.</p>

<p>Failing both of these conditions, Puppet would throw a parse error and say
that it couldn&rsquo;t determine a value for a class parameter.</p>

<p>As of Puppet 3.0.0, Puppet will now do a Hiera lookup for the fully namespaced
value of a class parameter</p>

<h3>Roles and Profiles</h3>

<p><a href="http://sysadvent.blogspot.com/2012/12/day-13-configuration-management-as-legos.html">The roles and profiles pattern</a> has been written about
a number of times and is ALSO considered to be &lsquo;a best practice&rsquo; when setting
up your Puppet environment. What roles and profiles gets you is a &lsquo;wrapper
class&rsquo; that allows you to declare classes within this wrapper class:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>profiles/manifests/wordpress.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="err">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;p&gt;</span><span class="kd">class</span> <span class="nc">profiles::wordpress</span> <span class="p">{</span><span class="c-Singleline"></span>
</span><span class='line'><span class="c-Singleline">  # Data Lookups</span>
</span><span class='line'>  <span class="nv">$site_name</span>               <span class="o">=</span> <span class="nf">hiera</span><span class="p">(</span><span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">profiles</span><span class="err">::</span><span class="ss">wordpress</span><span class="err">::</span><span class="ss">site_name</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">$wordpress_user_password</span> <span class="o">=</span> <span class="nf">hiera</span><span class="p">(</span><span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">profiles</span><span class="err">::</span><span class="ss">wordpress</span><span class="err">::</span><span class="ss">wordpress_user_password</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">$mysql_root_password</span>     <span class="o">=</span> <span class="nf">hiera</span><span class="p">(</span><span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">profiles</span><span class="err">::</span><span class="ss">wordpress</span><span class="err">::</span><span class="ss">mysql_root_password</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">$wordpress_db_host</span>       <span class="o">=</span> <span class="nf">hiera</span><span class="p">(</span><span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">profiles</span><span class="err">::</span><span class="ss">wordpress</span><span class="err">::</span><span class="ss">wordpress_db_host</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">$wordpress_db_name</span>       <span class="o">=</span> <span class="nf">hiera</span><span class="p">(</span><span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">profiles</span><span class="err">::</span><span class="ss">wordpress</span><span class="err">::</span><span class="ss">wordpress_db_name</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">$wordpress_db_password</span>   <span class="o">=</span> <span class="nf">hiera</span><span class="p">(</span><span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">profiles</span><span class="err">::</span><span class="ss">wordpress</span><span class="err">::</span><span class="ss">wordpress_db_password</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">)</span><span class="o">&lt;</span><span class="err">/</span><span class="ss">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="ss">p</span><span class="o">&gt;</span>  <span class="c-Singleline">## Create user</span>
</span><span class='line'>  <span class="nc">group</span> <span class="p">{</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">wordpress</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">:</span><span class="err">&lt;/</span><span class="ss">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">pre</span><span class="err">&gt;&lt;</span><span class="ss">code</span><span class="err">&gt;</span><span class="ss">ensure</span> <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="ss">present</span><span class="err">,</span>
</span><span class='line'><span class="err">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="ss">pre</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">p</span><span class="err">&gt;</span>  <span class="p">}</span>
</span><span class='line'>  <span class="ss">user</span> <span class="p">{</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">wordpress</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;:&lt;/</span><span class="ss">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">pre</span><span class="err">&gt;&lt;</span><span class="ss">code</span><span class="err">&gt;</span><span class="ss">ensure</span>   <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="ss">present</span><span class="p">,</span>
</span><span class='line'><span class="ss">gid</span>      <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="s1">&#39;wordpress&#39;</span><span class="p">,</span>
</span><span class='line'><span class="ss">password</span> <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="nv">$wordpress_user_password</span><span class="p">,</span>
</span><span class='line'><span class="ss">home</span>     <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="s1">&#39;/var/www/wordpress&#39;</span><span class="p">,</span>
</span><span class='line'><span class="err">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="ss">pre</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">p</span><span class="err">&gt;</span>  <span class="p">}</span><span class="err">&lt;/</span><span class="ss">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">p</span><span class="err">&gt;</span><span class="c-Singleline">  ## Configure mysql</span>
</span><span class='line'>  <span class="ss">class</span> <span class="p">{</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">mysql</span><span class="err">::</span><span class="ss">server</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;:&lt;/</span><span class="ss">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">pre</span><span class="err">&gt;&lt;</span><span class="ss">code</span><span class="err">&gt;</span><span class="ss">root_password</span> <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="nv">$wordpress_root_password</span><span class="p">,</span>
</span><span class='line'><span class="err">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="ss">pre</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">p</span><span class="err">&gt;</span>  <span class="p">}</span><span class="err">&lt;/</span><span class="ss">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">p</span><span class="err">&gt;</span>  <span class="ss">class</span> <span class="p">{</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">mysql</span><span class="err">::</span><span class="ss">bindings</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;:&lt;/</span><span class="ss">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">pre</span><span class="err">&gt;&lt;</span><span class="ss">code</span><span class="err">&gt;</span><span class="ss">php_enable</span> <span class="err">=&amp;</span><span class="ss">gt</span><span class="err">;</span> <span class="ss">true</span><span class="p">,</span>
</span><span class='line'><span class="err">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="ss">pre</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">p</span><span class="err">&gt;</span>  <span class="p">}</span><span class="err">&lt;/</span><span class="ss">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">p</span><span class="err">&gt;</span><span class="c-Singleline">  ## Configure apache</span>
</span><span class='line'>  <span class="ss">include</span> <span class="ss">apache</span>
</span><span class='line'>  <span class="ss">include</span> <span class="ss">apache</span><span class="p">::</span><span class="ss">mod</span><span class="p">::</span><span class="ss">php</span>
</span><span class='line'><span class="p">}</span><span class="err">&lt;/</span><span class="ss">p</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">h2</span><span class="err">&gt;</span><span class="ss">Continue</span> <span class="ss">with</span> <span class="ss">declarations</span><span class="err">&amp;</span><span class="ss">hellip</span><span class="err">;&lt;/</span><span class="ss">h2</span><span class="err">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="err">&lt;</span><span class="ss">p</span><span class="err">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Notice that any variables that might have business specific logic are set with
Hiera lookups. These Hiera lookups do NOT have default values, which means the
<code>hiera()</code> function will throw a parse error if a value is not returned. This
is IDEAL because we WANT TO KNOW if a Hiera lookup fails &ndash; this means we failed
to put the data in Hiera and should be corrected BEFORE a state that might
contain invalid data is enforced with Puppet.</p>

<p>You then have a &lsquo;Role&rsquo; wrapper class that simply includes many of the &lsquo;Profile&rsquo;
wrapper classes:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>roles/manifests/frontend.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="kd">class</span> <span class="nc">roles::frontend</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">include</span> <span class="nc">profiles::mysql</span>
</span><span class='line'>  <span class="kn">include</span> <span class="nc">profiles::apache</span>
</span><span class='line'>  <span class="kn">include</span> <span class="nc">profiles::java</span>
</span><span class='line'>  <span class="kn">include</span> <span class="nc">profiles::jboss</span>
</span><span class='line'><span class="c-Singleline">  # include more profiles&amp;hellip;</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>The idea being that Profiles abstract all the technical bits that need to
declared to setup a piece of technology, and Roles will abstract all the
business logic for what pieces of technology should be installed on a certain
&lsquo;class&rsquo; of machine.  Basically, you can say that &ldquo;all our frontend infrastructure
should have mysql, apache, java, jboss&hellip;&rdquo;.  In this statement, the Role is
&lsquo;frontend infrastructure&rsquo; and the Profiles are &lsquo;mysql, apache, java, jboss&hellip;&rsquo;.</p>

<h4>Pros:</h4>

<ul>
<li>Hiera data lookups are confined to a wrapper class OUTSIDE of the component modules (like mysql, apache, java, etc&hellip;)</li>
<li>Data lookups for parameters containing business logic are done with Hiera</li>
<li>Non-business specific data is pulled from the module (i.e. the params class)</li>
<li>Wrapper modules can be &lsquo;included&rsquo; with the <code>include</code> function, helping to eliminate multiple class declarations using the parameterized class declaration syntax</li>
<li>Component modules are backward-compatible to Puppet 2.6 while wrapper modules still get to use a modern data lookup mechanism (Hiera)</li>
<li>Component modules do NOT contain any business specific logic, which means they&rsquo;re portable</li>
</ul>


<h4>Cons:</h4>

<ul>
<li>Hiera must be setup to use the wrapper modules</li>
<li>Wrapper modules add another debug path for variable data</li>
<li>Wrapper modules add another layer of abstraction</li>
</ul>


<h2>Data in Puppet Modules</h2>

<p>R.I. Pienaar (the original author of MCollective, Hiera, and much more)
<a href="http://www.devco.net/archives/2013/12/08/better-puppet-modules-using-hiera-data.php">published a blog post</a>
recently on implementing a folder for Puppet modules that Hiera can traverse
when it does data lookups. This construct isn&rsquo;t new,
<a href="https://projects.puppetlabs.com/issues/16856">there was a feature request</a>
for this behavior filed in October of 2012 with a
<a href="https://github.com/puppetlabs/puppet/pull/1217">subsequent pull request</a>
that implemented this functionality (they&rsquo;re both worth reads for further
information). The pull request didn&rsquo;t get merged, and so R.I. implemented
the functionality <a href="http://forge.puppetlabs.com/ripienaar/module_data">inside a module on the Puppet Forge</a>.
In a nutshell, it&rsquo;s a hiera.yaml configuration file INSIDE THE MODULE that
implements a module-specific hierarchy, and a &lsquo;data&rsquo; folder (also inside
the module) that allows for individual YAML files that Hiera could read.
This hierarchy is consulted AFTER the site-specific <code>hiera.yaml</code> file
is read (i.e. <code>/etc/puppet/hiera.yaml</code> or <code>/etc/puppetlabs/puppet/hiera.yaml</code>),
and the in-module data files are consulted AFTER the site-specific Hiera
data files are read (normally found in either <code>/etc/puppet/hieradata</code> or
<code>/etc/puppetlabs/puppet/hieradata</code>).</p>

<p>The argument here is that there&rsquo;s a data store for <strong>SITE-SPECIFIC</strong> Hiera
data that should be kept outside of modules, but there&rsquo;s not a <strong>MODULE-SPECIFIC</strong>
data store that Hiera can use. The argument isn&rsquo;t whether data that should be
shared with other people belongs inside a site-specific Hiera datastore
(protip: it doesn&rsquo;t. Data that&rsquo;s not business-specific should be shared
with others and kept inside the module), the argument is that it shouldn&rsquo;t
be locked up inside the DSL where the barrier-to-entry is learning Puppet&rsquo;s
DSL syntax. Whereas <code>/etc/puppet/hiera.yaml</code> or <code>/etc/puppetlabs/puppet/hiera.yaml</code>
sets up the hierarchy for all your site-specific data, there&rsquo;s no per-module
<code>hiera.yaml</code> file for all module-specific data, and there&rsquo;s no place to put
module-specific Hiera data.</p>

<h4>But module-specific data goes inside the params class and business-specific data goes inside Hiera, right?</h4>

<p>Sure, but for some people the Puppet DSL is a barrier. The argument is that
there should be a lower barrier to entry to contribute parameter data
to Puppet that doesn&rsquo;t require you to learn the syntax of if/case/selector
statements in the Puppet DSL. There&rsquo;s also the argument that if you want
to add support for an operatingsystem to your module, you have to modify
the params class file and add another entry to the if/case/selector
statement &ndash; wouldn&rsquo;t it be easier to just add another YAML file into
a data folder that doesn&rsquo;t affect existing datafiles?</p>

<h4>Great, ANOTHER hierarchy to traverse for data &ndash; that&rsquo;s going to get confusing</h4>

<p>Well, think about it right now &ndash; most EVERY params class of EVERY module
(if it supports multiple operatingsystems)
does some sort of conditional logic to determine values for parameters
on a per-OS basis. That&rsquo;s something that you need to traverse. And many
modules use different conditional data to determine what paramters to use. Look
at the mysql params class example above &ndash; it not only splits on
<code>$osfamily</code>, but it also checks specific operatingsystems. That&rsquo;s a
conditional inside a conditional. You&rsquo;re TRAVERSING conditional data
right now to find a value &ndash; the only difference is that this method
doesn&rsquo;t use the DSL, it uses Hiera and YAML.</p>

<h4>Sure, but this is outside of Puppet and you&rsquo;re losing visibility inside Puppet with your data</h4>

<p>You&rsquo;re already doing that if you&rsquo;re using the params class. In this case, visibility is
moved to YAML files instead of separate Puppet classes.</p>

<h3>Setting it up</h3>

<p>You will first need to install R.I.&rsquo;s module from the Puppet Forge. As of
this writing, it&rsquo;s version <code>0.0.1</code>, so ensure you have the most recent
version using the <code>puppet module</code> tool:</p>

<pre><code>[root@linux modules]# puppet module install ripienaar/module_data
Notice: Preparing to install into /etc/puppetlabs/puppet/modules ...
Notice: Downloading from https://forge.puppetlabs.com ...
Notice: Installing -- do not interrupt ...
/etc/puppetlabs/puppet/modules
└── ripienaar-module_data (v0.0.1)
</code></pre>

<p>Next, you&rsquo;ll need to setup a module to use the data-in-modules pattern. Take
a look at the tree of a sample module:</p>

<pre><code>[root@linux modules]# tree mysql/
mysql/
├── data
│   ├── hiera.yaml
│   └── RedHat.yaml
└── manifests
    └── init.pp
</code></pre>

<p>I created a sample <code>mysql</code> module based on the examples above. All of
the module&rsquo;s Hiera data (including the module-specific hiera.yaml file)
goes in the <code>data</code> folder. This module should be placed in Puppet&rsquo;s
modulepath &ndash; and if you don&rsquo;t know where Puppet&rsquo;s modulepath is set,
run the <code>puppet config</code> face to determine that:</p>

<pre><code>[root@linux modules]# puppet config print modulepath
/etc/puppetlabs/puppet/modules:/opt/puppet/share/puppet/modules
</code></pre>

<p>In my case, I&rsquo;m putting the module in <code>/etc/puppetlabs/puppet/modules</code>
(since I&rsquo;m running Puppet Enterprise). Here&rsquo;s the hiera.yaml file
from the sample mysql module:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>mysql/data/hiera.yaml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">:hierarchy</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="nl">&amp;ndash</span><span class="l-Scalar-Plain">; &amp;ldquo;%{::osfamily}&amp;rdquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>I&rsquo;ve also included a YAML file for the <code>$osfamily</code> of RedHat:</p>

<h2><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>mysql/data/RedHat.yaml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;mysql::config_file</span><span class="p-Indicator">:</span> <span class="nl">&amp;lsquo</span><span class="l-Scalar-Plain">;/path/from/data_in_modules&amp;rsquo;</span>
</span><span class='line'><span class="l-Scalar-Plain">mysql::manage_config_file</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class='line'><span class="l-Scalar-Plain">mysql::old_root_password</span><span class="p-Indicator">:</span> <span class="nl">&amp;lsquo</span><span class="l-Scalar-Plain">;password_from_data_in_modules&amp;rsquo;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Finally, here&rsquo;s what the mysql class definition looks like from
<code>manifests/init.pp</code>:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>mysql/manifests/init.pp </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='puppet'><span class='line'><span class="kd">class</span> <span class="nc">mysql</span> <span class="p">(</span>
</span><span class='line'>  <span class="nv">$config_file</span>        <span class="p">=</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">module_default</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$manage_config_file</span> <span class="p">=</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">module_default</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span><span class="p">,</span>
</span><span class='line'>  <span class="nv">$old_root_password</span>  <span class="p">=</span> <span class="err">&amp;</span><span class="ss">lsquo</span><span class="err">;</span><span class="ss">module_default</span><span class="err">&amp;</span><span class="ss">rsquo</span><span class="err">;</span>
</span><span class='line'><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nc">notify</span> <span class="p">{</span> <span class="err">&amp;</span><span class="ss">ldquo</span><span class="err">;</span><span class="ss">The</span> <span class="ss">value</span> <span class="ss">of</span> <span class="ss">config_file</span><span class="p">:</span> <span class="err">$</span><span class="p">{</span><span class="ss">config_file</span><span class="p">}</span><span class="err">&amp;</span><span class="ss">rdquo</span><span class="err">;</span><span class="p">:</span> <span class="p">}</span>
</span><span class='line'>  <span class="nc">notify</span> <span class="p">{</span> <span class="err">&amp;</span><span class="ss">ldquo</span><span class="err">;</span><span class="ss">The</span> <span class="ss">value</span> <span class="ss">of</span> <span class="ss">manage_config_file</span><span class="p">:</span> <span class="err">$</span><span class="p">{</span><span class="ss">manage_config_file</span><span class="p">}</span><span class="err">&amp;</span><span class="ss">rdquo</span><span class="err">;</span><span class="p">:</span> <span class="p">}</span>
</span><span class='line'>  <span class="nc">notify</span> <span class="p">{</span> <span class="err">&amp;</span><span class="ss">ldquo</span><span class="err">;</span><span class="ss">The</span> <span class="ss">value</span> <span class="ss">of</span> <span class="ss">old_root_password</span><span class="p">:</span> <span class="err">$</span><span class="p">{</span><span class="ss">old_root_password</span><span class="p">}</span><span class="err">&amp;</span><span class="ss">rdquo</span><span class="err">;</span><span class="p">:</span> <span class="p">}</span>
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Everything should be setup to notify the value of a couple of parameters.
Now, to test it out&hellip;</p>

<h3>Testing data-in-modules</h3>

<p>Let&rsquo;s include the mysql class with <code>puppet apply</code> to see where it&rsquo;s looking
for data:</p>

<pre><code>[root@linux modules]# puppet apply -e 'include mysql'
Notice: The value of config_file: /path/from/data_in_modules
Notice: /Stage[main]/Mysql/Notify[The value of config_file: /path/from/data_in_modules]/message: defined 'message' as 'The value of config_file: /path/from/data_in_modules'
Notice: The value of manage_config_file: true
Notice: /Stage[main]/Mysql/Notify[The value of manage_config_file: true]/message: defined 'message' as 'The value of manage_config_file: true'
Notice: The value of old_root_password: password_from_data_in_modules
Notice: /Stage[main]/Mysql/Notify[The value of old_root_password: password_from_data_in_modules]/message: defined 'message' as 'The value of old_root_password: password_from_data_in_modules'
Notice: Finished catalog run in 0.62 seconds
</code></pre>

<p>Since I&rsquo;m running on an operatingsystem whose family is &lsquo;RedHat&rsquo; (i.e. CentOS),
you can see that the values of all the parameters were pulled from the Hiera
data files inside the module.  Let&rsquo;s temporarily change the <code>$osfamily</code> fact
value and see what happens:</p>

<pre><code>[root@linux modules]# FACTER_osfamily=Debian puppet apply -e 'include mysql'
Notice: The value of config_file: module_default
Notice: /Stage[main]/Mysql/Notify[The value of config_file: module_default]/message: defined 'message' as 'The value of config_file: module_default'
Notice: The value of old_root_password: module_default
Notice: /Stage[main]/Mysql/Notify[The value of old_root_password: module_default]/message: defined 'message' as 'The value of old_root_password: module_default'
Notice: The value of manage_config_file: module_default
Notice: /Stage[main]/Mysql/Notify[The value of manage_config_file: module_default]/message: defined 'message' as 'The value of manage_config_file: module_default'
Notice: Finished catalog run in 0.51 seconds
</code></pre>

<p>This time, when I specified a value of <code>Debian</code> for <code>$osfamily</code>, the parameter
values were pulled from the declaration in the mysql class definition (i.e.
from inside <code>mysql/manifests/init.pp</code>).</p>

<h3>Testing outside of Puppet</h3>

<p>One of the big pros of Hiera is that it comes with the <code>hiera</code> binary that can
be run from the command line to test values. This works just fine for site-specific
module data that&rsquo;s defined in the central <code>hiera.yaml</code> file that&rsquo;s usually defined
in <code>/etc/puppet</code> or <code>/etc/puppetlabs/puppet</code>, but the data-in-modules pattern relies
on a Puppet indirector to point to the current module&rsquo;s <code>data</code> folder, and thus
(as of right now) there&rsquo;s not a simple way to run the <code>hiera</code> binary to pull
data out of modules WITHOUT running Puppet. This is not a dealbreaker, and
doesn&rsquo;t stop anybody from hacking up something that WILL look inside modules
for data, but as of right now it doesn&rsquo;t yet exist. It also makes debugging for
values that come out of modules a bit more difficult.</p>

<h3>The scorecard for data-in-modules</h3>

<h4>Pros:</h4>

<ul>
<li>Parameters are defined in YAML and not Puppet DSL (i.e. you only need to know YAML and not the Puppet DSL)</li>
<li>Adding parameters is as simple as adding another YAML file to the module</li>
<li>Module authors provide module data that can be read by Puppet 3.x.x Hiera data bindings</li>
</ul>


<h4>Cons:</h4>

<ul>
<li>Must be using Puppet 3.0.0 or higher</li>
<li>Additional hierarchy and additional Hiera data file to consult when debugging</li>
<li>Not (currently) an easy/straightforward way to use the <code>hiera</code> binary to test values</li>
<li>Currently depends on a Puppet Forge module being installed on your system</li>
</ul>


<h2>What are you trying to say?</h2>

<p>I am ALL ABOUT code portability, re-usability, and not building 500 apache modules.
Ever since people have been building modules, they&rsquo;ve been putting too much data
inside modules (to the point where they can&rsquo;t share them with anyone else). I
can&rsquo;t tell you how many times I&rsquo;ve heard &ldquo;We have a module for that, but I can&rsquo;t
share it because it has all our company-specific data in it.&rdquo;</p>

<p>Conversely, I&rsquo;ve also seen organizations put EVERYTHING in their site-specific
Hiera datastore because &ldquo;that&rsquo;s the place for Puppet data.&rdquo; They usually end up
with 15+ levels in their Hiera hierarchies because they&rsquo;re doing things like
this:</p>

<h2><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>hiera.yaml </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;:backends</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="nl">&amp;ndash</span><span class="l-Scalar-Plain">; yaml&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">&lt;p&gt;:hierarchy</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="nl">&amp;ndash</span><span class="l-Scalar-Plain">; &amp;ldquo;%{clientcert}&amp;rdquo;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; &amp;ldquo;%{environment}&amp;rdquo;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; &amp;ldquo;%{osfamily}&amp;rdquo;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; &amp;ldquo;%{osfamily}/%{operatingsystem}&amp;rdquo;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; &amp;ldquo;%{osfamily}/%{operatingsystem}/%{os_version_major}&amp;rdquo;</span>
</span><span class='line'>  <span class="l-Scalar-Plain">&amp;ndash; &amp;ldquo;%{osfamily}/%{operatingsystem}/%{os_version_minor}&amp;rdquo;</span>
</span><span class='line'>  <span class="l-Scalar-Plain"># Repeat until you have 15 levels of WTF</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>This leads us back again to &ldquo;What does and DOESN&rsquo;T go in Hiera?&rdquo;
I usually say the following:</p>

<h4>Data in site-specific Hiera datastore</h4>

<ul>
<li>Business-specific data (i.e. internal NTP server, VIP address, per-environment java application versions, etc&hellip;)</li>
<li>Sensitive data</li>
<li>Data that you don&rsquo;t want to share with anyone else</li>
</ul>


<h4>Data that does NOT go in the site-specific Hiera datastore</h4>

<ul>
<li>OS-specific data</li>
<li>Data that EVERYONE ELSE who uses this module will need to know (paths to config files, package names, etc&hellip;)</li>
</ul>


<p>Basically, if I ask you if I can publish your module to <a href="http://forge.puppetlabs.com">the Puppet Forge</a>,
and you object because it has business-specific or sensitive data in it, then
you probably need to pull that data out of the module and put it in Hiera.</p>

<p>The recommendations that I give when I go on-site with Puppet users is the following:</p>

<ul>
<li>Use Roles/Profiles to create wrapper-classes for class declaration</li>
<li>Do ALL Hiera lookups for site-specific data inside your &lsquo;Profile&rsquo; wrapper classes</li>
<li>All module-specific data (like paths to config files, names of packages to install, etc&hellip;) should be kept in the module in the params class</li>
<li>All &lsquo;Role&rsquo; wrapper classes should just <strong>include</strong> &lsquo;Profile&rsquo; wrapper classes &ndash; nothing else</li>
</ul>


<h2>But what about Data in Modules?</h2>

<p>I went through all the trouble of writing up the Data in Modules pattern,
but I didn&rsquo;t recommend or even MENTION it in the previous section. The reason
is NOT because I don&rsquo;t believe in it (I actually think the future will be data
outside of the DSL inside a Puppet module), the reason is because it&rsquo;s not <strong>YET</strong>
in Puppet&rsquo;s core and because it&rsquo;s not <strong>YET</strong> been widely tested. If you&rsquo;re an
existing Puppet user that&rsquo;s been looking for a way to split data outside of
the DSL, here is your opportunity. Use the pattern and PLEASE report back on what
you like and don&rsquo;t like about it. The functionality is in a module, so it&rsquo;s
easy to tweak. If you&rsquo;re new to Puppet and are comfortable with the DSL, then
the params class exists and is available to you.</p>

<p>To voice your opinion or to follow the progress of data in modules,
<a href="https://projects.puppetlabs.com/issues/16856">follow or comment on this Puppet ticket.</a></p>

<h2>Update</h2>

<p><a href="http://www.devco.net/archives/2013/12/09/the-problem-with-params-pp.php">R.I. posted another article on the problem with params.pp</a>
that is worth reading. He gives compelling reasons on why he built Hiera, why
params.pp WORKS, but also why he believes it&rsquo;s not the future of Puppet. R.I.
goes even further to explain that it&rsquo;s not necessarily the Puppet DSL that is
the barrier to entry, it&rsquo;s that this sort of data belongs in a file for config
data and not INSIDE THE CODE itself (i.e. inside the Puppet DSL). Providing data
inside modules gives module authors a way to provide this configuration data
in files that AREN&rsquo;T the Puppet DSL (i.e. not inside the code).</p>
]]></content>
  </entry>
  
</feed>
